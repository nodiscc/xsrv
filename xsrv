#!/bin/bash
set -o errexit
set -o nounset
# Description: a wrapper around the ansible suite of tools. Manages independent projects consisting of
#              a virtualenv-based ansible installation, a standard file/directory structure, an isolated
#              collections installation directory. Provides easily accessible commands for common configuration,
#              secrets management, deployment and maintenance tasks.
usage="
USAGE: xsrv COMMAND [project] [host]

COMMANDS:
init-project [project] [host]       initialize a new project (and optionally a first host)
edit-inventory [project]            edit/show inventory file (hosts/groups)
edit-playbook [project]             edit/show playbook (roles for each host)
edit-requirements [project]         edit ansible requirements/collections
edit-cfg [project]                  edit ansible configuration (ansible.cfg)
upgrade [project]                   upgrade a project's roles/collections to latest versions
init-host [project] [host]          add a new host to an existing project
edit-host [project] [host]          edit host configuration (host_vars)
edit-vault [project] [host]         edit encrypted (vault) host configuration (host_vars)
edit-group [project] [group]        edit group configuration (group_vars)
edit-group-vault [project] [group]  edit encrypted (vault) group configuration (group_vars)
check [project] [host|group]        simulate deployment, report what would be changed
deploy [project] [host|group]       deploy the main playbook (apply configuration/roles)
fetch-backups [project] [host]      fetch backups from a host to the local backups directory
scan [project]                      scan a project directory for cleartext passwords/secrets
shell|ssh [project] [host]          open interactive SSH shell on a host
logs [project] [host]               view system logs on a host
o|open [project]                    open the project directory in the default file manager
readme-gen [project]                generate a markdown inventory in the project's README.md
nmap [project]                      run a nmap scan against hosts in the project
show-defaults [project] [role]      show all variables and their default values
show-groups [project] [host]        list all groups a host is a member of
help                                show this message
help-tags [project]                 show the list of ansible tags and their descriptions
self-upgrade                        check for new releases/upgrade the xsrv script in-place
init-vm-template [--help] [options] initialize a new libvirt VM template
init-vm [--help] [options]          initialize a new libvirt VM from a template

If no project is specified, the 'default' project is assumed.
For edition/utility commands, if no host/group is specified, the first host/group in alphabetical order is assumed.
For deploy/check commands, if no host/group is specified, the 'all' group (all hosts) is assumed.

# ENVIRONMENT VARIABLES (usage: VARIABLE=VALUE xsrv COMMAND)
TAGS               deploy/check only: list of ansible tags (TAGS=ssh,samba,... xsrv deploy)
EDITOR             text editor to use (default: nano)
PAGER              pager to use (default: nano --syntax=YAML --view +1 -)

# DOCUMENTATION/EXAMPLES: https://xsrv.readthedocs.io/en/master/usage.html
"


########## CONFIGURATION/DEFAULTS ##########

xsrv_base_dir="${XSRV_BASE_DIR:=$HOME/.local/share/xsrv}"
xsrv_clone_dir="${xsrv_base_dir}/git"
projects_dir="${XSRV_PROJECTS_DIR:=$HOME/playbooks}"
editor="${EDITOR:=nano}"
ansible_tags="${TAGS:-}"
pager="${PAGER:=nano --syntax=YAML --view +1 -}"
version="1.25.0"
ansible_version="10.5.0"
trivy_version="0.49.1"
xsrv_git_url="https://gitlab.com/nodiscc/xsrv"
xsrv_upgrade_channel="${XSRV_UPGRADE_CHANNEL:=release}"
local_backups_dir="data/backups"
ascii_banner="  ╻ ╻┏━┓┏━┓╻ ╻
░░╺╋╸┗━┓┣┳┛┃┏┛
  ╹ ╹┗━┛╹┗╸┗┛ v${version}"

command="${1:-}"
project_name="${2:-default}"
project_dir="$projects_dir/$project_name"
venv_dir="$project_dir/.venv"
host_name="${3:-}"
ssh_args=""

########## PROJECT-LEVEL MANAGEMENT ##########

init_project() {
    # initialize a new project
    if [[ -e "$project_dir" ]]; then
        echo "[xsrv] ERROR: $project_dir already exists"; exit 1
    fi
    mkdir -p "$project_dir"
    init_venv
    upgrade_roles
    echo "[xsrv] INFO: creating files and directories for $project_name"
    templates_dir="$project_dir/ansible_collections/nodiscc/xsrv/playbooks/xsrv"
    cp -rn "$templates_dir"/{ansible.cfg,inventory.yml,README.md,requirements.yml,data/,group_vars/,playbooks/} "$project_dir/"
    gen_vault_password_file
    init_host "$host_name"
    echo "[xsrv] INFO: project $project_name initialized in $project_dir"
    echo "[xsrv] INFO: run xsrv deploy to apply configuration now, or xsrv help for more options"
}

legacy_init_playbook() {
    echo "[xsrv] WARNING: init-playbook is deprecated and will be removed in a future release. Use init-project"
    init_project
}

edit_playbook() {
    # edit a playbook file
    playbook_file="$projects_dir/$project_name/playbook.yml"
    echo "[xsrv] INFO: opening playbook file $playbook_file"
    $editor "$playbook_file"
}

edit_inventory() {
    # edit an inventory file
    inventory_file="$projects_dir/$project_name/inventory.yml"
    echo "[xsrv] INFO: opening inventory file $inventory_file"
    $editor "$inventory_file"
}

edit_requirements() {
    # edit requirements.yml file
    requirements_file="$projects_dir/$project_name/requirements.yml"
    echo "[xsrv] INFO: opening requirements file $requirements_file"
    $editor "$requirements_file"
}

edit_ansible_cfg() {
    # edit ansible.cfg file
    cfg_file="$projects_dir/$project_name/ansible.cfg"
    echo "[xsrv] INFO: opening requirements file $cfg_file"
    $editor "$cfg_file"
}


########## HOST/GROUP-LEVEL MANAGEMENT ##########

init_host() {
    # add a new host to a project (from template files)
    check_project_exists
    until [[ -n "$host_name" ]]; do
        read -r -p "[xsrv] Host name to add to the $project_name project (ex: my.CHANGEME.org): " host_name
    done
    if [[ -e "$project_dir/host_vars/$host_name" ]]; then
        echo "[xsrv] ERROR: $project_dir/host_vars/$host_name already exists"; exit 1
    fi
    echo "[xsrv] INFO: adding $host_name to the last inventory group"
    echo "    $host_name:" >> "$project_dir/inventory.yml"

    echo "[xsrv] INFO: adding default play for $host_name to project $project_name"
    templates_dir="$project_dir/ansible_collections/nodiscc/xsrv/playbooks/xsrv"
    echo "" >> "$project_dir/playbook.yml"
    sed "s/my.example.org/$host_name/g" "$templates_dir/playbook.yml" >> "$project_dir/playbook.yml"

    echo "[xsrv] INFO: creating default host vars file for $host_name"
    mkdir -p "$project_dir/host_vars/$host_name"
    host_vars_file="$project_dir/host_vars/$host_name/$host_name.yml"
    sed "s/my.example.org/$host_name/g" "$templates_dir/host_vars/my.example.org/my.example.org.yml" > "$host_vars_file"

    echo "[xsrv] INFO: creating default vault file for $host_name"
    host_vault_file="$project_dir/host_vars/$host_name/$host_name.vault.yml"
    sed "s/my.example.org/$host_name/g" "$templates_dir/host_vars/my.example.org/my.example.org.vault.yml" > "$host_vault_file"

    gen_random_passwords "$host_vault_file"
    edit_playbook "$project_name"
    edit_host "$project_name" "$host_name"

    echo "[xsrv] INFO: Encrypting secrets file"
    (cd "$project_dir/" && ansible-vault encrypt "$project_dir/host_vars/$host_name/$host_name.vault.yml")
    edit_vault "$project_name" "$host_name"

    echo "[xsrv] INFO: Host is ready for deployment. Run xsrv deploy $project_name $host_name"
}

edit_host() {
    # edit a host's vars file
    _check_host_name
    echo "[xsrv] INFO: opening host vars file $host_vars_file"
    $editor "$host_vars_file"
}

edit_group() {
    # edit group variables
    check_group_name
    echo "[xsrv] INFO: opening group_vars file $group_vars_file"
    mkdir -p "$(dirname "$group_vars_file")"
    $editor "$group_vars_file"
}

edit_group_vault() {
    # edit a group's vault file
    check_group_name
    echo "[xsrv] INFO: opening group vault file $group_vault_file"
    mkdir -p "$(dirname "$group_vault_file")"
    cd "$projects_dir/$project_name"
    if [[ ! -f "$group_vault_file" ]]; then
        touch "$group_vault_file"
        ansible-vault encrypt "$group_vault_file"
    fi
    EDITOR="$editor" ansible-vault edit "$group_vault_file"
}

edit_vault() {
    # edit a host's vault file
    _check_host_name
    echo "[xsrv] INFO: opening vault file $host_vault_file"
    cd "$projects_dir/$project_name"
    EDITOR="$editor" ansible-vault edit "$host_vault_file"
}


########## DEPLOYMENT RELATED COMMANDS ##########

# shellcheck disable=SC2086 # use arrays for variable expansion, unnecessarily complex
check() {
    # run ansible playbook in check mode
    check_project_exists
    if [[ -n "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ -n "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$projects_dir/$project_name"
    echo "[xsrv] INFO: deploying (dry-run) main playbook for project $project_name"
    ansible-playbook playbook.yml --check --diff $ansible_tags_arg $ansible_host_arg
}

# shellcheck disable=SC2086 # use arrays for variable expansion, unnecessarily complex
deploy() {
    # run ansible playbook
    if [[ -n "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg="--limit=all"; fi
    if [[ -n "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg="--tags=all"; fi
    cd "$projects_dir/$project_name"
    echo "[xsrv] INFO: deploying main playbook for project $project_name"
    ansible-playbook playbook.yml $ansible_tags_arg $ansible_host_arg
}


########## UTILITIES/HELPERS ##########

run_shell() {
    # open a SSH shell on a host
    _check_host_name
    ssh_user=$(_get_host_var "ansible_user")
    ssh_port=$(_get_host_var "ansible_ssh_port|default(22)")
    echo "[xsrv] INFO: connecting to $ssh_user@$host_name port $ssh_port"
    ssh_command="ssh -t -p $ssh_port $ssh_user@$host_name $ssh_args"
    $ssh_command
}

fetch_backups() {
    # fetch latest daily backups from the host
    check_project_exists
    _check_host_name
    ssh_port=$(_get_host_var "ansible_ssh_port|default(22)")
    ssh_user=$(_get_host_var "ansible_user")
    backup_date=$(date "+%Y%m%d_%H%M%S")
    echo "[xsrv] INFO: fetching latest daily backups from $host_name in project $project_name"
    rsync --archive --verbose --rsh="ssh -p $ssh_port" \
      --progress --fake-super --rsync-path='/usr/bin/sudo /usr/bin/rsync' \
      "$ssh_user@$host_name:/var/backups/rsnapshot/daily.0/" \
      "$projects_dir/$project_name/$local_backups_dir/daily.0.$backup_date"
}

_xdg_open() {
    # open the project directory in the default file manager
    xdg-open "$projects_dir/$project_name"
}

_validate_ip_address() {
    # validate an IPv4 address
    local address="$1"
    echo -n "$address" | grep -q -P '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$' || \
        (echo "[xsrv] ERROR: $address is not a valid IPv4 address"; exit 1)
}

show_defaults() {
    # show all role defaults
    role=${2:-}
    check_project_exists
    if ! hash "${pager%% *}" 2>/dev/null; then
        echo "[xsrv] INFO: pager command '$pager' unavailable, falling back to 'less'"
        pager="less"
    fi
    if [[ -n "$role" ]]; then
        cat "$project_dir"/ansible_collections/*/*/roles/"$role"/defaults/main.yml | $pager 2>/dev/null
    else
        # shellcheck disable=SC2002
        defaults_header="# List of all role configuration variables, and their default values.\\n# Copy any variable to your host configuration and edit its value there (xsrv edit-host/edit-vault).\\n######################################################\\n\\n"
        default_files=$(find "$project_dir"/ansible_collections/*/*/roles/*/defaults/ -name main.yml)
        defaults_list=$(for file in $default_files; do
            cat "$file"; echo -e "\\n\\n###################################################################"
        done)
        echo -e "$defaults_header""$defaults_list" | $pager 2>/dev/null
    fi
}
show_groups() {
    # list all groups a host is a member of
    _check_host_name
    cd "$projects_dir/$project_name"
    echo "[xsrv] INFO: showing all groups for $host_name"
    ansible -m debug -a 'msg={{ group_names }}' "$host_name"
}

help() {
    # show help
    echo "$usage"
    exit 1
}


########## ANSIBLE INSTALLATION AND UPGRADES ##########

create_venv() {
    echo "[xsrv] INFO: creating virtualenv in $venv_dir"
    mkdir -p "$venv_dir"
    python3 -m venv "$venv_dir"
    source "$venv_dir/bin/activate"
    echo "[xsrv] INFO: installing ansible in $venv_dir"
    pip3 install wheel
    pip3 install ansible=="$ansible_version" netaddr lxml
}

init_venv() {
    # check if a working ansible virtualenv exists,
    # check if the installed ansible version matches the expected version,
    # otherwise create/activate the virtualenv and install ansible
    check_project_exists
    {
        source "$venv_dir/bin/activate" 2>/dev/null
        ansible_installed_version=$(pip3 show ansible|grep '^Version' | awk -F' ' '{print $2}')
        [ "$ansible_installed_version" == "$ansible_version" ]
    } || create_venv
}

upgrade_roles() {
    check_project_exists
    if [[ ! -f "$project_dir"/requirements.yml ]]; then
        echo "[xsrv] INFO: installing default collection git+$xsrv_git_url,$xsrv_upgrade_channel"
        (cd "$project_dir" && ansible-galaxy collection install --force --collections-path "$project_dir/" "git+$xsrv_git_url,$xsrv_upgrade_channel")
    else
        echo "[xsrv] INFO: upgrading collections from requirements.yml"
        (cd "$project_dir" && ansible-galaxy collection install --force -r requirements.yml)
    fi
    create_venv
}

self_upgrade() {
    # upgrade the running xsrv script in-place
    script_path="$0"
    echo "[xsrv] INFO fetching latest release..."
    if [[ -d "$xsrv_clone_dir/.git" ]]; then
        git -C "$xsrv_clone_dir" pull
        git -C "$xsrv_clone_dir" checkout "$xsrv_upgrade_channel"
    else
        git clone -b "$xsrv_upgrade_channel" "$xsrv_git_url" "$xsrv_clone_dir"
    fi
    new_version="$(grep '^version=.*' "$xsrv_clone_dir/xsrv" | cut -d= -f2)"
    new_commit="$(git -C "$xsrv_clone_dir" rev-parse HEAD)"
    read -r -p "[xsrv] INFO: this will upgrade the script at $script_path ($version) to $new_version ($new_commit). Type YES to confirm: " confirm_upgrade
    if [[ "$confirm_upgrade" == "YES" ]]; then
        if [[ -w "$script_path" ]]; then
            echo "[xsrv] INFO: $script_path is writeable"
            cp "$xsrv_clone_dir/xsrv" "$script_path"
            echo "[xsrv] INFO: upgrade complete"
            exit 0
        else
            echo "[xsrv] INFO: $script_path is not writeable. Upgrading with sudo"
            sudo cp -v "$xsrv_clone_dir/xsrv" "$script_path"
            echo "[xsrv] INFO: upgrade complete"
            exit 0
        fi
    else
        echo "[xsrv] ERROR: did not enter YES, aborting"
        exit 1
    fi
}

########## LIBVIRT RELATED COMMANDS ##########

init_vm() {
    INIT_VM_USAGE="$0 init-vm  --name VM_NAME [--template debian12-base] --ip IP_ADDRESS [--netmask 24] [--gateway GATEWAY_IP] [--ssh-port VM_SSH_PORT] [--sudo-user deploy] [--sudo-password VM_SUDO_PASSWORD] [--ssh-pubkey 'ssh-rsa AAAAB...'] [--root-password VM_ROOT_PASSWORD] [--disk-path /path/to/my.CHANGEME.org.qcow2] [--memory 1G] [--vcpus NUM_CPU] [--dumpxml $projects_dir/VM_NAME.xml]
        EXAMPLE: $0 init-vm --template debian12-base --name my.CHANGEME.org --ip 10.0.0.223 --netmask 24 --gateway 10.0.0.254 --sudo-user deploy --sudo-password CHANGEME --root-password CHANGEME --ssh-pubkey \$(cat ~/.ssh/id_ecdsa.pub) --memory 3G --vcpus 4 --dumpxml /playbooks/default/data/libvirt/my.CHANGEME.org.xml
        Initialize a libvirt VM from a template, configure resources/users/SSH access, and start the VM.
        Requirements: openssh-client sshpass libvirt virtinst libvirt-daemon-system libguestfs-tools pwgen netcat-openbsd util-linux
        --template      name of the template to create the new VM from (default debian12-base)
        --name          REQUIRED name of the VM to create
        --ip            REQUIRED IP address of the VM
        --gateway       default network gateway (default: same as IP, last octet replaced by .1)
        --netmask       network mask of the VM (CIDR notation, default 24)
        --root-password root account password (default generate and display a random password)
        --sudo-user     admin (sudoer) user name (default deploy)
        --sudo-password admin (sudoer) password (default generate and display a random password)
        --ssh-pubkey    SSH public key to authorize on the admin (sudoer) account (default: the contents of ~/.ssh/id_rsa.pub)
        --disk-path     path to the qcow2 disk image to create (default: /var/lib/libvirt/images/VM_NAME.qcow2)
        --memory        VM memory with M or G suffix (default 1G)
        --vcpus         number of vCPUs (default: same value as the template)
        --dumpxml       write VM XML definition to this file (default $projects_dir/VM_NAME.xml)
        "
    check_user_in_libvirt_groups
    # parse command-line options
    long_opts="help,template:,name:,ip:,netmask:,gateway:,ssh-port:,root-password:,sudo-user:,sudo-password:,ssh-pubkey:,disk-path:,memory:,vcpus:,dumpxml:"
    GETOPT=$(getopt -o '' --longoptions "$long_opts" --name "[xsrv] ERROR" -- "$@")
    eval set -- "$GETOPT"
    # default values
    template="debian12-base"
    name=""
    ip=""
    netmask="24"
    gateway=""
    ssh_port="22"
    sudo_user="deploy"
    sudo_password=$(pwgen -s 21 1)
    ssh_pubkey="$(cat ~/.ssh/id_rsa.pub)"
    root_password=$(pwgen -s 21 1)
    disk_path=""
    memory="1G"
    vcpus=""
    dumpxml_file=""
    # override defaults with user-provided values
    while true; do
        case "$1" in
            -h|--help) echo "USAGE: $INIT_VM_USAGE"; exit;;
            --template) template=$2; shift 2;;
            --name) name=$2; shift 2;;
            --ip) ip=$2; shift 2;;
            --netmask) netmask=$2; shift 2;;
            --gateway) gateway=$2; shift 2;;
            --ssh-port) ssh_port=$2; shift 2;;
            --sudo-user) sudo_user=$2; shift 2;;
            --sudo-password) sudo_password=$2; shift 2;;
            --ssh-pubkey) ssh_pubkey=$2; shift 2;;
            --root-password) root_password=$2; shift 2;;
            --disk-path) disk_path=$2; shift 2;;
            --memory) memory=$2; shift 2;;
            --vcpus) vcpus=$2; shift 2;;
            --dumpxml) dumpxml_file=$2; shift 2;;
            --) shift; break;;
            *) echo "[xsrv] ERROR: invalid option $1"; echo "USAGE: $INIT_VM_USAGE"; exit 1;;
        esac
    done
    # check mandatory options
    for i in "$name" "$ip"; do
        if [[ -z "$i" ]]; then echo "[xsrv] ERROR: missing required option"; echo "[xsrv] USAGE: $INIT_VM_USAGE"; exit 1; fi
    done
    if [[ -z "$gateway" ]]; then
        gateway="$(echo "$ip" | cut -d'.' -f1-3).1"
        echo "[xsrv] INFO: --gateway not provided, automatically set to $gateway"
    fi
    for i in "$ip" "$gateway"; do _validate_ip_address "$i"; done
    if [[ -z "$dumpxml_file" ]]; then
        dumpxml_file="$projects_dir/$name.xml"
        echo "[xsrv] INFO: --dumpxml not provided, automatically set to $projects_dir/$name.xml"
    fi
    if [[ ! "$memory" =~ ^[0-9]*[GM] ]]; then
        echo "[xsrv] ERROR --memory value must use the M or G suffix (e.g. 1024M or 1G)"
        exit 1
    fi

    # build /etc/network/interfaces for the target system 
    cat > ./libvirt-clone-interfaces.txt << EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug enp1s0
iface enp1s0 inet static
    address ${ip}/${netmask}
    gateway ${gateway}
EOF

    echo "[xsrv] INFO: attempting to resolve $name..."
    getent hosts "$name" || (echo "[xsrv] ERROR: resolving $name failed! Make sure a record exists in the DNS system or add this entry to /etc/hosts: $ip      $name"; exit 1)
    if [[ -z "$disk_path" ]]; then disk_path="/var/lib/libvirt/images/$name.qcow2"; fi
    echo "[xsrv] INFO: cloning template $template to $name..."
    virt-clone --connect qemu:///system \
        --original "$template" \
        --name "$name" \
        --file "$disk_path"
    # virt-clone always creates the disk image with owner/group root:root mode 0600
    echo "[xsrv] INFO: fixing permissions on $disk_path..."
    sudo chown libvirt-qemu:libvirt "$disk_path"
    sudo chmod 0660 "$disk_path"
    echo "[xsrv] INFO: cleaning up $name..."
    virt-sysprep --connect qemu:///system \
        --domain "$name" \
        --hostname "$name" \
        --password "$sudo_user:password:$sudo_password" \
        --root-password "password:$root_password" \
        --firstboot-command "dpkg-reconfigure openssh-server" \
        --upload ./libvirt-clone-interfaces.txt:/etc/network/interfaces \
        --ssh-inject "$sudo_user:string:$ssh_pubkey"
    if [[ -n "$memory" ]]; then
        echo "[xsrv] INFO: updating memory settings for $name..."
        virsh --connect qemu:///system setmaxmem --domain "$name" --size "$memory" --config
        virsh --connect qemu:///system setmem --domain "$name" --size "$memory" --config
    fi
    if [[ -n "$vcpus" ]]; then
        echo "[xsrv] INFO: updating CPU settings for $name..."
        virsh --connect qemu:///system setvcpus --domain "$name" --count "$vcpus" --config --maximum
        virsh --connect qemu:///system setvcpus --domain "$name" --count "$vcpus" --config
    fi
    echo "[xsrv] INFO: starting VM $name..."
    virsh --connect qemu:///system start "$name"
    echo "[xsrv] INFO: waiting for $name SSH server to start accepting connections..."
    until nc -w 1 "$name" "$ssh_port"; do sleep 1; done
    echo "[xsrv] INFO: adding $name ssh server's hostkey to known_hosts file..."
    ssh-keyscan -H "$name" 2>/dev/null >> ~/.ssh/known_hosts
    echo "[xsrv] INFO: $name setup complete, your VM is ready to use:"
    echo "[xsrv] INFO: SSH access: ssh -p $ssh_port $sudo_user@$name"
    echo "[xsrv] INFO: SSH hostkeys fingerprints:"
    ssh-keyscan "$name" 2>/dev/null | ssh-keygen -lf -
    echo "[xsrv] INFO password for $sudo_user: $sudo_password"
    echo "[xsrv] INFO: password for root: $root_password"
    rm ./libvirt-clone-interfaces.txt

    echo "[xsrv] INFO: dumping VM XML definition to $dumpxml_file"
    virsh --connect qemu:///system dumpxml "$name" > "$dumpxml_file"
    echo "[xsrv] INFO: You may now start managing this VM using the nodiscc.xsrv.libvirt_role."
    echo -e "libvirt_vms:\\n  - name: $name\\n    xml_file: '{{ playbook_dir }}/data/libvirt/$(basename "$dumpxml_file")'"
}

# to delete the VM: virsh destroy $TEMPLATE_VMNAME; virsh undefine $TEMPLATE_VMNAME; virsh vol-delete --pool /var/lib/libvirt/images/$TEMPLATE_VMNAME.qcow2
init_vm_template() {
    INIT_VM_TEMPLATE_USAGE="$0 init-vm-template [--name debian12-base] --ip IP_ADDRESS [--gateway GATEWAY_IP] [--netmask 255.255.255.0] [--nameservers GATEWAY_IP] [--root-password TEMPLATE_ROOT_PASSWORD] [--sudo-user deploy] [--sudo-password SUDO_PASSWORD] [--storage-path /var/lib/libvirt/images] [--memory 1024] [--vcpus 2] [--disk-size 20] [--network default] [--preseed-file $xsrv_clone_dir/docs/preseed.cfg]
        Initialize a libvirt VM template from official Debian netinstall image and a preseed file. This template can be reused as --template from xsrv init-vm.
        Requirements: libvirt, current user in the libvirt group
        --name          name of the VM/template to create (default debian12-base)
        --ip            REQUIRED IP address of the VM/template
        --gateway       default network gateway (default: same as IP, last octet replaced by .1)
        --netmask       network mask of the VM (default 255.255.255.0)
        --nameservers   space-separated list of DNS nameservers (default same as the gateway)
        --root-password root account password (default generate and display a random password)
        --sudo-user     admin (sudoer) user name (default deploy)
        --sudo-password admin (sudoer) password (default generate and display a random password)
        --storage-path  path to the directory where qcow2 disk images will be stored (default /var/lib/libvirt/images)
        --memory        VM memory, in MB (default 1024)
        --vcpus         VM vCPUs (default 2)
        --disk-size     size of the disk image to create, in GB (default 20)
        --network       name of the libvirt network to attach the VM to (default default)
        --preseed-file  path to the preseed/preconfiguration file (default $xsrv_clone_dir/docs/preseed.cfg)

        "
    check_user_in_libvirt_groups
    # parse command-line options
    long_opts="help,name:,storage-path:,memory:,vcpus:,disk-size:,network:,ip:,gateway:,netmask:,preseed-file:,root-password:,sudo-password:,sudo-user:,nameservers:"
    GETOPT=$(getopt -o '' --longoptions "$long_opts" --name "[xsrv] ERROR" -- "$@")
    eval set -- "$GETOPT"
    # default values
    name="debian12-base"
    storage_path="/var/lib/libvirt/images"
    memory="1024"
    vcpus="2"
    disk_size="20"
    network="default"
    ip=""
    gateway=""
    netmask="255.255.255.0"
    nameservers=""
    preseed_file="$xsrv_clone_dir/docs/preseed.cfg"
    root_password=$(pwgen -s 21 1)
    sudo_user="deploy"
    sudo_password=$(pwgen -s 21 1)
    # override defaults with user-provided values
    while true; do
        case "$1" in
            -h|--help) echo "USAGE: $INIT_VM_TEMPLATE_USAGE"; exit;;
            --name) name=$2; shift 2;;
            --storage-path) storage_path=$2; shift 2;;
            --memory) memory=$2; shift 2;;
            --vcpus) vcpus=$2; shift 2;;
            --network) network=$2; shift 2;;
            --ip) ip=$2; shift 2;;
            --gateway) gateway=$2; shift 2;;
            --netmask) netmask=$2; shift 2;;
            --nameservers) nameservers=$2; shift 2;;
            --disk-size) disk_size=$2; shift 2;;
            --preseed-file) preseed_file=$2; shift 2;;
            --root-password) root_password=$2; shift 2;;
            --sudo-user) sudo_user=$2; shift 2;;
            --sudo-password) sudo_password=$2; shift 2;;
            --) shift; break;;
            *) echo "[xsrv] ERROR: invalid option $1"; echo "USAGE: $INIT_VM_TEMPLATE_USAGE"; exit 1;;
        esac
    done
    for i in "$name" "$ip"; do
        if [[ -z "$i" ]]; then echo "[xsrv] ERROR: missing required option"; echo "[xsrv] USAGE: $INIT_VM_TEMPLATE_USAGE"; exit 1; fi
    done
    if [[ -z "$gateway" ]]; then
        gateway="$(echo "$ip" | cut -d'.' -f1-3).1"
        echo "[xsrv] INFO: --gateway not provided, automatically set to $gateway"
    fi
    if [[ -z "$nameservers" ]]; then
        nameservers="$gateway"
        echo "[xsrv] INFO: --nameservers not provided, automatically set to $gateway"
    fi
    for i in "$ip" "$gateway"; do _validate_ip_address "$i"; done
    if [[ ! -d "$xsrv_clone_dir/.git" ]]; then
        git clone -b "$xsrv_upgrade_channel" "$xsrv_git_url" "$xsrv_clone_dir"
    fi
    echo "[xsrv] making the preseed file available to libvirt-qemu"
    sudo cp "$preseed_file" /var/lib/libvirt/preseed.cfg
    sudo chmod 0660 /var/lib/libvirt/preseed.cfg # don't make it world-readable
    sudo chown libvirt-qemu:libvirt-qemu /var/lib/libvirt/preseed.cfg
    echo "[xsrv] setting values the preseed file"
    sudo sed -i "s/%%HOSTNAME%%/${name}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%SUDO_USER%%/${sudo_user}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%SUDO_PASSWORD%%/${sudo_password}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%ROOT_PASSWORD%%/${root_password}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%IP_ADDRESS%%/${ip}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%GATEWAY%%/${gateway}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%NETMASK%%/${netmask}/g" /var/lib/libvirt/preseed.cfg
    sudo sed -i "s/%%NAMESERVERS%%/${nameservers}/g" /var/lib/libvirt/preseed.cfg
    echo "[xsrv] INFO: installing operating system using preseed to VM $name..."
    sudo virt-install \
        --connect qemu:///system \
        --name "$name" \
        --memory "$memory" \
        --disk "$storage_path/$name.qcow2,size=$disk_size,device=disk,bus=virtio,cache=none" \
        --vcpus "$vcpus" \
        --os-variant debian10 \
        --graphics none \
        --console pty,target_type=serial \
        --location http://deb.debian.org/debian/dists/bookworm/main/installer-amd64 \
        --extra-args "console=ttyS0,115200n8 serial" \
        --initrd-inject="/var/lib/libvirt/preseed.cfg" \
        --network network="$network" \
        --noreboot
    reset
    echo "[xsrv] INFO: cleaning up $name..."
    sudo rm /var/lib/libvirt/preseed.cfg
    sudo chown root:libvirt-qemu "$storage_path/$name.qcow2"
    sudo chmod 0660 "$storage_path/$name.qcow2"
    virt-sysprep --connect qemu:///system --domain "$name"
    echo "[xsrv] INFO password for $sudo_user: $sudo_password"
    echo "[xsrv] INFO: password for root: $root_password"
}

readme_gen() {
    # generate a markdown inventory with information on ansible facts in the project's README.md
    # see https://gitlab.com/nodiscc/xsrv/-/tree/master/roles/readme_gen
    (cd "$project_dir" && (ansible --one-line --module-name setup all || true))
    (cd "$project_dir" && ANSIBLE_CACHE_PLUGIN_TIMEOUT=3600 ansible --extra-vars="xsrv_project_name=$project_name" --module-name "ansible.builtin.import_role" --args "name=nodiscc.xsrv.readme_gen" localhost)
}

scan_secrets() {
    # run trivy secret scanner against a project directory, exit with error if secrets found
    if [[ ! -d "$xsrv_clone_dir/.git" ]]; then
        git clone -b "$xsrv_upgrade_channel" "$xsrv_git_url" "$xsrv_clone_dir"
    fi
    wget --no-verbose --continue -O "${xsrv_base_dir}/trivy_${trivy_version}_Linux-64bit.tar.gz" "https://github.com/aquasecurity/trivy/releases/download/v${trivy_version}/trivy_${trivy_version}_Linux-64bit.tar.gz"
    (cd "$xsrv_base_dir" && tar -z -x trivy -f trivy_${trivy_version}_Linux-64bit.tar.gz)
    "$xsrv_base_dir/trivy" fs --exit-code 1 --secret-config "$xsrv_clone_dir/docs/trivy-secrets.yml" --scanners secret "$projects_dir/$project_name/host_vars/"
    "$xsrv_base_dir/trivy" fs --exit-code 1 --secret-config "$xsrv_clone_dir/docs/trivy-secrets.yml" --scanners secret "$projects_dir/$project_name/group_vars/"
}

nmap() {
    # run nmap against hosts in the project and generate a HTML report
    # see https://gitlab.com/nodiscc/xsrv/-/tree/master/roles/nmap
    (cd "$project_dir" && ANSIBLE_CACHE_PLUGIN_TIMEOUT=3600 ansible --ask-become-pass --module-name "ansible.builtin.import_role" --args "name=nodiscc.xsrv.nmap" localhost)
}

########## INTERNAL HELPERS ##########

_get_host_var() {
    # get a host var using ansible -m debug | grep
    # $1: the variable to get, filters allowed (example: "ansible_ssh_port|default(22)")
    (cd "$project_dir" && ansible --one-line --inventory inventory.yml --module-name debug --args "msg={{ $1 }}" "$host_name" | \
    grep -oP '(?<="msg": ").*(?="})')
}

gen_vault_password_file() {
    # generate a 32-character random password for ansible-vault and store it in a file
    echo "[xsrv] INFO: Generating random password for ansible-vault"
    openssl rand -base64 32 > "$projects_dir/$project_name/.ansible-vault-password"
    echo "[xsrv] INFO: vault password stored in $projects_dir/$project_name/.ansible-vault-password"
    echo "[xsrv] INFO: Keep this file private! Keep backups of this file!"
}

gen_random_passwords() {
    # replace CHANGEMEXX values in file $1, where XX is an integer, with random password with length = XX
    host_vault_file="$1"
    if ! command -v pwgen >/dev/null; then
        echo "[xsrv] WARNING: pwgen not installed, unable to generate random passwords for $host_name. Please manually replace any values labeled CHANGEME!"
        return
    fi
    echo "[xsrv] INFO: generating random passwords for $host_name"
    randomized_vault=$(while read -r line; do
        if echo "$line" | grep -E 'CHANGEME[0-9]+' 2>&1 >/dev/null; then
            num_char=$(echo "$line" | grep -oP '(?<=CHANGEME)[0-9]+(?=")')
            echo "$line" | sed -E "s/CHANGEME[0-9]+/$(pwgen -s "$num_char" 1)/"
        else
            echo "$line"
        fi
    done < "$host_vault_file")
    echo "$randomized_vault" > "$host_vault_file"
}

check_project_exists() {
    # check that the directory for the specified playbook exists, exit with error if not
    if [[ ! -e "$project_dir" ]]; then
        echo "[xsrv] ERROR: project $project_dir does not exist"; exit 1;
    fi
}

_check_host_name() {
    # check if host_vars files exist for a host, set host_vars_file and host_vault_file global variables
    check_project_exists
    if [[ -z "$host_name" ]]; then
        host_vars_dirs=$(find "$projects_dir/$project_name/host_vars/" -mindepth 1 -maxdepth 1 -type d | sort --reverse)
        host_name="${host_vars_dirs##*/}"
        echo "[xsrv] INFO: no host name provided, using $host_name as host name"
        if [[ ! $(echo "$host_name" | wc -l) -eq 1 ]]; then
            echo "[xsrv] ERROR: no host name specified and multiple hosts found in project"; exit 1
        fi
    fi
    host_vars_file="$projects_dir/$project_name/host_vars/$host_name/$host_name.yml"
    host_vault_file="$projects_dir/$project_name/host_vars/$host_name/$host_name.vault.yml"
    if [[ ! -f "$host_vars_file" ]]; then
        echo "[xsrv] ERROR: $host_vars_file does not exist"; exit 1
    fi
}

check_group_name() {
    # check if group_vars files exist for a group, set group_vars_file global variable
    check_project_exists
    group_name="$host_name"
    if [[ -z "$group_name" ]]; then
        echo "[xsrv] INFO: no group name provided, editing variables for group 'all'"
        group_name="all"
    fi
    group_vars_file="$projects_dir/$project_name/group_vars/$group_name/$group_name.yml"
    group_vault_file="$projects_dir/$project_name/group_vars/$group_name/$group_name.vault.yml"
}

help_tags() {
    # show the list of tags and their descriptions
    check_project_exists
    cd "$projects_dir/$project_name"
    echo "[xsrv] INFO: list of tags in project $project_name"
    echo "[xsrv] USAGE: TAGS=tag1,tag2,tag3 xsrv deploy $project_name"
    tags_doc=$(grep --no-filename '^# @tag' ansible_collections/*/*/roles/*/meta/main.yml | \
               cut -d " " -f 1-2 --complement | \
               sort --unique)
    echo "TAGS:"
    echo "$tags_doc"
    tags_doc_short=$(echo "$tags_doc" | cut -d " " -f 1 | sort --unique)
    # format ansible-playbook --list tags output as a list, one item per line
    tags_discovered_all=$(ansible-playbook playbook.yml --list-tags --tags never,all | \
                        grep 'TASK TAGS:' | \
                        sed 's/      TASK TAGS: \[//' | \
                        sed 's/\]$//' | \
                        sed 's/, /\n/g' | \
                        sort --unique)
    echo "OTHER TAGS:"
    diff --changed-group-format='%<%>' --unchanged-group-format='' <(echo "$tags_doc_short") <(echo "$tags_discovered_all") || true
}

check_user_in_libvirt_groups() {
    # check if the user is in the required groups to use init-vm/init-vm-template commands
    missing_groups=""
    for groupname in libvirt libvirt-qemu kvm; do
        id --name --groups --zero | grep -qzxF "$groupname" || missing_groups="$missing_groups $groupname"
    done
    if [[ "$(whoami)" != "root" && -n "$missing_groups" ]]; then
        echo "[xsrv] ERROR: the current user is not a member of groups:$missing_groups. Please add your user to appropriate groups: sudo usermod $(whoami) -aG libvirt libvirt-qemu kvm. Logging out and in again might be needed to apply group membership changes."
        exit 1
    fi
}

########## MAIN ##########

_main() {
    # main loop and command-line wrapper
    # MAINT: when the list of commands is updated, the help text above, docs/usage.md and xsrv-completion.sh must also be updated
    echo "$ascii_banner"
    if [[ -z "$command" ]]; then echo "[xsrv] ERROR: no command provided"; echo "$usage"; exit 1; fi
    case "$command" in
        "init-project") shift; init_project ;;
        "init-host") init_venv; shift; init_host ;;
        "deploy") check_project_exists; init_venv; shift; deploy ;;
        "check") init_venv; shift; check ;;
        "edit-playbook") shift; edit_playbook ;;
        "edit-inventory") shift; edit_inventory ;;
        "edit-requirements") shift; edit_requirements;;
        "edit-cfg") shift; edit_ansible_cfg;;
        "edit-host") shift; edit_host ;;
        "edit-group") shift; edit_group;;
        "edit-group-vault") init_venv; shift; edit_group_vault;;
        "edit-vault") init_venv; shift; edit_vault ;;
        "shell"|"ssh") init_venv; shift; run_shell ;;
        "logs") init_venv; shift; ssh_args="bash -c 'if [[ -r /var/log/syslog ]]; then lnav /var/log/syslog; else sudo lnav /var/log/syslog; fi'"; run_shell ;;
        "o"|"open") shift; _xdg_open "$@" ;;
        "help") echo "$usage" ;;
        "help-tags") init_venv; shift; help_tags ;;
        "fetch-backups") init_venv; shift; fetch_backups ;;
        "upgrade") init_venv; shift; upgrade_roles ;;
        "readme-gen") init_venv; shift; readme_gen "$@";;
        "nmap") init_venv; shift; nmap "$@";;
        "scan") scan_secrets "$@";;
        "show-defaults") shift; show_defaults "$@";;
        "show-groups") init_venv; shift; show_groups "$@";;
        "self-upgrade") self_upgrade;;
        "init-vm") init_vm "$@";;
        "init-vm-template") init_vm_template "$@";;
        "init-playbook") init_venv; shift; legacy_init_playbook;;
        *) echo "[xsrv] ERROR: unrecognized command $command"; exit 1 ;;
    esac
}

############################

_main "$@"
