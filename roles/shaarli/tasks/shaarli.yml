### USER ###

- name: create shaarli user
  user:
    name: shaarli
    state: present
    home: "{{ shaarli_install_dir }}"
    create_home: no

### PACKAGES ###

- name: install required packages for shaarli
  apt:
    state: present
    package:
      - "{{ php_json_package }}"
      - "php{{ shaarli_php_fpm_version }}-mbstring"
      - "php{{ shaarli_php_fpm_version }}-intl"
      - "php{{ shaarli_php_fpm_version }}-gd"
      - "php{{ shaarli_php_fpm_version }}-curl"
      - "php{{ shaarli_php_fpm_version }}-gettext"
      - "php{{ shaarli_php_fpm_version }}-ldap"

### CHECK INSTALLATION STATUS ###

- name: check if shaarli installation directory exists
  stat:
    path: "{{ shaarli_install_dir }}"
  register: shaarli_dir

- name: abort on unsupported conditions
  fail:
    msg: "ERROR: unsupported conditions: shaarli_dir.stat.exists: {{ shaarli_dir.stat.exists }}, but ansible_local.shaarli.installed.version says otherwise" # noqa 204
  when: '((ansible_local.shaarli.installed.version is defined) and (not shaarli_dir.stat.exists)) or
         ((ansible_local.shaarli.installed.version is undefined) and (shaarli_dir.stat.exists))'

- name: check if initial installation should be performed
  set_fact:
    shaarli_action: initial
  when:
    - ansible_local.shaarli.installed.version is undefined
    - not shaarli_dir.stat.exists

- name: check if upgrade should be performed
  set_fact:
    shaarli_action: upgrade
  when:
    - ansible_local.shaarli.installed.version is defined
    - ansible_local.shaarli.installed.version < shaarli_version
    - shaarli_dir.stat.exists

- name: check if no upgrade or initial installation should be performed
  set_fact:
    shaarli_action: configure_only
  when:
    - ansible_local.shaarli.installed.version is defined
    - ansible_local.shaarli.installed.version == shaarli_version

### SHAARLI INSTALLATION/UPGRADE ###

- name: download shaarli zip
  get_url:
    url: "https://github.com/shaarli/Shaarli/releases/download/{{ shaarli_version }}/shaarli-{{ shaarli_version }}-full.zip"
    dest: "/root/shaarli-{{ shaarli_version }}-full.zip"
    owner: root
    group: root
    mode: "0640"
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')

- name: remove shaarli zip extraction directory
  file:
    path: /root/shaarli-unpack
    state: absent

- name: create shaarli zip extraction directory
  file:
    path: /root/shaarli-unpack
    state: directory
    mode: "0755"
    owner: root
    group: root
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')

- name: extract shaarli zip
  unarchive:
    src: "/root/shaarli-{{ shaarli_version }}-full.zip"
    dest: "/root/shaarli-unpack"
    remote_src: yes
    mode: u=rwX
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')
  no_log: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: set file permissions
  file:
    path: "{{ item.path }}"
    owner: root
    group: shaarli
    mode: "{{ item.mode }}"
    recurse: no
  with_items:
    - { path: "/root/shaarli-unpack/Shaarli", mode: "0755" }
    - { path: "/root/shaarli-unpack/Shaarli/data", mode: "0770" }
    - { path: "/root/shaarli-unpack/Shaarli/tmp", mode: "0770" }
    - { path: "/root/shaarli-unpack/Shaarli/cache", mode: "0770" }
    - { path: "/root/shaarli-unpack/Shaarli/pagecache", mode: "0770" }
  ignore_errors: "{{ ansible_check_mode }}"
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')

- name: move old shaarli installation to temporary dir
  command: mv '{{ shaarli_install_dir }}' '{{ shaarli_install_dir }}.old'
  args:
    removes: '{{ shaarli_install_dir }}'
  when: shaarli_action == 'upgrade'

- name: move shaarli extraction directory to install directory
  command: mv /root/shaarli-unpack/Shaarli '{{ shaarli_install_dir }}'
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')
  changed_when: yes

- name: copy data directory from old installation
  copy:
    remote_src: yes
    src: '{{ shaarli_install_dir }}.old/data'
    dest: '{{ shaarli_install_dir }}/'
    mode: preserve
    owner: root
    group: shaarli
  when: shaarli_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: copy shaarli configuration
  template:
    src: "var_www_shaarli_data_config.json.php.j2"
    dest: "{{ shaarli_install_dir }}/data/config.json.php"
    owner: root
    group: shaarli
    mode: "0660"
    force: "{{ shaarli_overwrite_config }}"
  tags: shaarli-config

# fail2ban jail requires an existing log file, but shaarli only creates this on first access
- name: create initial shaarli log.txt
  file:
    state: touch
    path: "{{ shaarli_install_dir }}/data/log.txt"
    access_time: preserve
    modification_time: preserve
    owner: root
    group: shaarli
    mode: "0660"
  when: shaarli_action == 'initial'
  ignore_errors: "{{ ansible_check_mode }}"

- name: update ownership/mode of directories
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: shaarli
    recurse: "{{ item.recurse | default(True) }}"
    mode: "{{ item.mode | default('u=rwX,g=rwX,o=') }}"
  when: (shaarli_action == 'initial') or (shaarli_action == 'upgrade')
  ignore_errors: "{{ ansible_check_mode }}"
  with_items:
    - path: "{{ shaarli_install_dir }}"
      recurse: no
      mode: "0755"
    - path: "{{ shaarli_install_dir }}/data"
    - path: "{{ shaarli_install_dir }}/tmp"
    - path: "{{ shaarli_install_dir }}/cache"
      owner: www-data
    - path: "{{ shaarli_install_dir }}/pagecache"

- name: remove old shaarli installation
  file:
    path: '{{ shaarli_install_dir }}.old'
    state: absent
  no_log: yes
