#### NEXTCLOUD #####

### USER ###

- name: create nextcloud user
  user:
    name: nextcloud
    state: present
    home: /var/nextcloud
    create_home: yes

### PACKAGES ###

- name: install required packages
  apt:
    state: present
    package:
      - php-gmp
      - php-curl
      - php-gd
      - php-imagick
      - php-intl
      - php-json
      - php-ldap
      - php-sqlite3
      - php-mbstring
      - php-xml
      - php-zip
      - php-bz2
      - php-imap
      - php-apcu
      - ffmpeg
      - acl

### GET/SET FACTS ###

- name: check if nextcloud installation directory exists
  stat:
    path: "{{ nextcloud_install_dir }}"
  register: nextcloud_dir

- name: abort on unsupported conditions
  fail:
    msg: "ERROR: unsupported conditions: nextcloud_dir.stat.exists: {{ nextcloud_dir.stat.exists }}, but ansible_local.nextcloud.installed.version says otherwise" # noqa 204
  when: '((ansible_local.nextcloud.installed.version is defined) and (not nextcloud_dir.stat.exists)) or
         ((ansible_local.nextcloud.installed.version is undefined) and (nextcloud_dir.stat.exists))'

- name: set the default installation action (do nothing)
  set_fact:
    nextcloud_action: none

- name: check if initial installation should be performed
  set_fact:
    nextcloud_action: initial
  when:
    - ansible_local.nextcloud.installed.version is undefined
    - not nextcloud_dir.stat.exists

- name: check if upgrade should be performed
  set_fact:
    nextcloud_action: upgrade
  when:
    - ansible_local.nextcloud.installed.version is defined
    - ansible_local.nextcloud.installed.version < nextcloud_version
    - nextcloud_dir.stat.exists

# - debug:
#     msg: "action: {{ nextcloud_action }}, nextcloud_dir.stat.exists: {{ nextcloud_dir.stat.exists }}, nextcloud_version: {{ nextcloud_version }}"

### DOWNLOAD/INSTALLATION ###

- name: download nextcloud zip
  get_url:
    url: "https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.zip"
    dest: "/root/nextcloud-{{ nextcloud_version }}.zip"
    owner: root
    group: root
    mode: 0640
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'

- name: create nextcloud zip extraction directory
  file:
    path: /root/nextcloud-unpack
    state: directory
    mode: 0750
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  check_mode: no # create even in check mode so that following tasks don't fail

- name: extract nextcloud zip
  unarchive:
    src: "/root/nextcloud-{{ nextcloud_version }}.zip"
    dest: "/root/nextcloud-unpack"
    remote_src: yes
    mode: u=rwX
  no_log: True
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: give write permissions to the webserver
  file:
    path: "{{ item.path }}"
    owner: nextcloud
    group: nextcloud
    mode: "{{ item.mode }}"
    recurse: no
  with_items:
    - { path: "/root/nextcloud-unpack/nextcloud/apps", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/config", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/themes", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/occ", mode: "g+X" }
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: move old nextcloud installation to temporary dir
  command: mv '{{ nextcloud_install_dir }}' '{{ nextcloud_install_dir }}.old'
  args:
    removes: '{{ nextcloud_install_dir }}'
  when: nextcloud_action == 'upgrade'

- name: move nextcloud extraction directory to install directory
  command: mv /root/nextcloud-unpack/nextcloud '{{ nextcloud_install_dir }}'
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'

### USER MIGRATION WWW-DATA -> NEXTCLOUD ###

- name: update ownership of data directory
  file:
    path: "/var/nextcloud"
    state: directory
    owner: nextcloud
    group: nextcloud
    recurse: yes
  when: (ansible_local.nextcloud.data_directory_owner_migrated is not defined) or (not ansible_local.nextcloud.data_directory_owner_migrated)
  ignore_errors: "{{ ansible_check_mode }}"

- name: update ownership of application directories
  file:
    path: "{{ item }}"
    owner: nextcloud
    group: nextcloud
    recurse: yes
  with_items:
    - "{{ nextcloud_install_dir }}/apps"
    - "{{ nextcloud_install_dir }}/config"
    - "{{ nextcloud_install_dir }}/themes"
  when: (ansible_local.nextcloud.data_directory_owner_migrated is not defined) or (not ansible_local.nextcloud.data_directory_owner_migrated)
  ignore_errors: "{{ ansible_check_mode }}"

- name: update ownership of occ script
  file:
    path: "{{ nextcloud_install_dir }}/occ"
    owner: nextcloud
    group: nextcloud
  when: (ansible_local.nextcloud.data_directory_owner_migrated is not defined) or (not ansible_local.nextcloud.data_directory_owner_migrated)
  ignore_errors: "{{ ansible_check_mode }}"

##### CONFIGURATION #####

- name: create nextcloud data directory
  file:
    path: "/var/nextcloud/data"
    state: directory
    owner: nextcloud
    group: nextcloud
    mode: 0770
  ignore_errors: "{{ ansible_check_mode }}"

- name: run first setup (this can take a while)
  become_user: nextcloud
  command: /usr/bin/php occ \
           maintenance:install \
           --database="{{ nextcloud_db_type }}" \
           --database-host="{{ nextcloud_db_host }}" \
           --database-name="{{ nextcloud_db_name }}" \
           --database-user="{{ nextcloud_db_user }}" \
           --database-pass="{{ nextcloud_db_password }}" \
           --admin-user="{{ nextcloud_user }}" \
           --admin-pass="{{ nextcloud_password }}"
           --data-dir="{{ nextcloud_data_dir }}"
           --admin-email="{{ nextcloud_admin_email }}"
  register: nextcloud_first_setup
  args:
    chdir: "{{ nextcloud_install_dir }}"
  failed_when: (nextcloud_first_setup.rc != 0) and ('Command "maintenance:install" is not defined.' not in nextcloud_first_setup.stderr) # noqa 204
  changed_when: nextcloud_first_setup.rc == 0
  ignore_errors: "{{ ansible_check_mode }}"
  when: nextcloud_action == 'initial'

- name: copy config.php from old installation
  copy:
    remote_src: yes
    src: '{{ nextcloud_install_dir }}.old/config/config.php'
    dest: '{{ nextcloud_install_dir }}/config/config.php'
    owner: nextcloud
    group: nextcloud
    mode: 0660
  when: nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

# occ doesn't report changed status, not idempotent, alwyas returns changd
# Note: if this fails the install will be left in a broken state, the working copy is still at {{ nextcloud_fqdn }}.old
- name: set nextcloud config.php values (always returns changed)
  become: yes
  become_user: nextcloud
  command: /usr/bin/php ./occ config:system:set --type={{ item.type | default('string') }} {{ item.key }} --value={{ item.value }} # noqa 301
  args:
    chdir: "{{ nextcloud_install_dir }}/"
  with_items:
    - { key: "trusted_domains 1", value: "{{ nextcloud_fqdn }}" }
    - { key: "overwrite.cli.url", value: "{{ nextcloud_full_url }}" }
    - { key: "datadir", value: "{{ nextcloud_data_dir }}" }
    - { key: "dbtype", value: "{{ nextcloud_db_type }}" }
    - { key: "dbname", value: "{{ nextcloud_db_name }}" }
    - { key: "dbhost", value: "{{ nextcloud_db_host }}" }
    - { key: "dbuser", value: "{{ nextcloud_db_user }}" }
    - { key: "dbpassword", value: "{{ nextcloud_db_password }}", no_log: True }
    - { key: "logtimezone", value: "UTC" }
    - { key: "log_type", value: "file" }
    - { key: "log_authfailip", value: "true", type: "boolean" }
    - { key: "loglevel", value: "1", type: "integer" }
    - { key: "trashbin_retention_obligation", value: "auto" }
    - { key: "memcache.local", value: '\\OC\\Memcache\\APCu' }
    - { key: "share_folder", value: '{{ nextcloud_share_folder }}' }
  no_log: "{{ item.no_log | default(False) }}"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: nextcloud-config

# trashbin_retention_obligation:
#   auto: keep for 30 days, then delete IF space needed
#   D, auto: keep at least D+ days, then delete IF space needed
#   auto, D: max D days, but delete if space needed
#   D1, D2: keep lat east D1 days and max D2 days
#   disabled: auto clean disabled

- name: run nextcloud upgrade command
  become_user: nextcloud
  command: /usr/bin/php ./occ upgrade
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_upgrade
  changed_when: not 'Nextcloud is already at the latest version' in nextcloud_upgrade.stdout
  when: (nextcloud_action == 'initial') or (nextcloud_action == 'upgrade')
  ignore_errors: "{{ ansible_check_mode }}"

- name: schedule nextcloud background tasks
  cron:
    user: nextcloud
    cron_file: nextcloud
    minute: "*/5"
    job: "/usr/bin/php -f {{ nextcloud_install_dir }}/cron.php >/dev/null"
    name: "run nextcloud background tasks"

- name: add missing primary keys and indices to nextcloud database
  become_user: nextcloud
  command: "/usr/bin/php ./occ --no-interaction db:{{ item }}"
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_add_missing_pkeys_indices
  changed_when: "'Adding' in nextcloud_add_missing_pkeys_indices.stdout"
  ignore_errors: "{{ ansible_check_mode }}"
  with_items:
    - add-missing-primary-keys
    - add-missing-indices

- name: convert columns to bigint in nextcloud database
  become_user: nextcloud
  command: "/usr/bin/php ./occ --no-interaction db:convert-filecache-bigint"
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_convert_filecache_bigint
  changed_when: "'will be updated' in nextcloud_convert_filecache_bigint.stdout"
  ignore_errors: "{{ ansible_check_mode }}"

### ANSIBLE FACTS ###

- name: create ansible facts.d directory
  file:
    path: /etc/ansible/facts.d
    state: directory
    mode: 0755

- name: create nextcloud fact file
  template:
    src: etc_ansible_facts.d_nextcloud.fact.j2
    dest: /etc/ansible/facts.d/nextcloud.fact
    mode: 0644

### NEXTCLOUD APPLICATIONS ####

- include: nextcloud-applications.yml
  tags: nextcloud-applications

### CLEANUP ###

- name: remove nextcloud zip extraction directory
  file:
    path: /root/nextcloud-unpack
    state: absent

- name: remove old nextcloud installation
  file:
    path: '{{ nextcloud_install_dir }}.old'
    state: absent
  no_log: True
  when:
    - nextcloud_action == 'upgrade'
