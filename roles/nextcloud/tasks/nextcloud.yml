#### NEXTCLOUD #####

### USER ###

- name: create nextcloud user
  user:
    name: nextcloud
    state: present
    home: /var/nextcloud
    create_home: yes

- name: add nextcloud user to msmtp group
  user:
    name: nextcloud
    groups: msmtp
    append: yes
  ignore_errors: "{{ ansible_check_mode }}"
  when:
    - ansible_local.msmtp.ansible_managed is defined
    - ansible_local.msmtp.ansible_managed | bool
  tags:
    - mail
    - msmtp

### PACKAGES ###

- name: install required packages
  apt:
    state: present
    package:
      - "php{{ nextcloud_php_fpm_version }}-gmp"
      - "php{{ nextcloud_php_fpm_version }}-curl"
      - "php{{ nextcloud_php_fpm_version }}-gd"
      - "php{{ nextcloud_php_fpm_version }}-imagick"
      - "php{{ nextcloud_php_fpm_version }}-intl"
      - "{{ php_json_package }}"
      - "php{{ nextcloud_php_fpm_version }}-ldap"
      - "php{{ nextcloud_php_fpm_version }}-sqlite3"
      - "php{{ nextcloud_php_fpm_version }}-mbstring"
      - "php{{ nextcloud_php_fpm_version }}-xml"
      - "php{{ nextcloud_php_fpm_version }}-zip"
      - "php{{ nextcloud_php_fpm_version }}-bz2"
      - "php{{ nextcloud_php_fpm_version }}-imap"
      - "php{{ nextcloud_php_fpm_version }}-apcu"
      - ffmpeg
      - acl
      - gnupg

### GET/SET FACTS ###

- name: check if nextcloud installation directory exists
  stat:
    path: "{{ nextcloud_install_dir }}"
  register: nextcloud_dir

- name: abort on unsupported conditions
  fail:
    msg: "ERROR: unsupported conditions: nextcloud_dir.stat.exists: {{ nextcloud_dir.stat.exists }}, but ansible_local.nextcloud.installed.version says otherwise" # noqa 204
  when: '((ansible_local.nextcloud.installed.version is defined) and (not nextcloud_dir.stat.exists)) or
         ((ansible_local.nextcloud.installed.version is undefined) and (nextcloud_dir.stat.exists))'

- name: set the default installation action (do nothing)
  set_fact:
    nextcloud_action: none

- name: check if initial installation should be performed
  set_fact:
    nextcloud_action: initial
  when:
    - ansible_local.nextcloud.installed.version is undefined
    - not nextcloud_dir.stat.exists

- name: check if upgrade should be performed
  set_fact:
    nextcloud_action: upgrade
  when:
    - ansible_local.nextcloud.installed.version is defined
    - ansible_local.nextcloud.installed.version < nextcloud_version
    - nextcloud_dir.stat.exists

# - debug:
#     msg: "action: {{ nextcloud_action }}, nextcloud_dir.stat.exists: {{ nextcloud_dir.stat.exists }}, nextcloud_version: {{ nextcloud_version }}"

### DOWNLOAD/INSTALLATION ###

- name: download nextcloud zip
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "0640"
  with_items:
    - url: "https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.zip"
      dest: "/root/nextcloud-{{ nextcloud_version }}.zip"
    - url: "https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.zip.asc"
      dest: "/root/nextcloud-{{ nextcloud_version }}.zip.asc"
    - url: "https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.zip.sha256"
      dest: "/root/nextcloud-{{ nextcloud_version }}.zip.sha256"

# Key from https://nextcloud.com/nextcloud.asc
- name: copy nextcloud GPG key
  copy:
    src: root_nextcloud.key
    dest: /root/nextcloud.key
    owner: root
    group: root
    mode: "0660"

- name: import nextcloud GPG key
  command: gpg --import /root/nextcloud.key
  register: nextcloud_import_gpgkey
  changed_when: "'unchanged: 1' not in nextcloud_import_gpgkey.stderr"

- name: verify nextcloud GPG signatures
  command: gpg --verify /root/nextcloud-{{ nextcloud_version }}.zip.asc /root/nextcloud-{{ nextcloud_version }}.zip
  changed_when: no

- name: create nextcloud zip extraction directory
  file:
    path: /root/nextcloud-unpack
    state: directory
    mode: "0750"
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: extract nextcloud zip
  unarchive:
    src: "/root/nextcloud-{{ nextcloud_version }}.zip"
    dest: "/root/nextcloud-unpack"
    remote_src: yes
    mode: u=rwX
  no_log: True
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: give write/execute permissions to the nextcloud user
  file:
    path: "{{ item.path }}"
    owner: nextcloud
    group: nextcloud
    mode: "{{ item.mode }}"
    recurse: no
  with_items:
    - { path: "/root/nextcloud-unpack/nextcloud/apps", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/config", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/themes", mode: "g+w" }
    - { path: "/root/nextcloud-unpack/nextcloud/occ", mode: "g+X" }
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: move old nextcloud installation to temporary dir
  command: mv '{{ nextcloud_install_dir }}' '{{ nextcloud_install_dir }}.old'
  args:
    removes: '{{ nextcloud_install_dir }}'
  when: nextcloud_action == 'upgrade'

- name: move nextcloud extraction directory to install directory
  command: mv /root/nextcloud-unpack/nextcloud '{{ nextcloud_install_dir }}'
  when: nextcloud_action == 'initial' or nextcloud_action == 'upgrade'
  changed_when: yes

##### CONFIGURATION #####

- name: create nextcloud data directory
  file:
    path: "/var/nextcloud/data"
    state: directory
    owner: nextcloud
    group: nextcloud
    mode: "0770"
  ignore_errors: "{{ ansible_check_mode }}"

- name: run first setup (this can take a while)
  become: yes
  become_user: nextcloud
  command:
    cmd: |
      /usr/bin/php occ
      maintenance:install
      --database="{{ nextcloud_db_type }}"
      --database-host="{{ nextcloud_db_host }}"
      --database-name="{{ nextcloud_db_name }}"
      --database-user="{{ nextcloud_db_user }}"
      --database-pass="{{ nextcloud_db_password }}"
      --admin-user="{{ nextcloud_user }}"
      --admin-pass="{{ nextcloud_password }}"
      --data-dir="{{ nextcloud_data_dir }}"
      --admin-email="{{ nextcloud_admin_email }}"
  register: nextcloud_first_setup
  args:
    chdir: "{{ nextcloud_install_dir }}"
  failed_when: (nextcloud_first_setup.rc != 0) and ('Command "maintenance:install" is not defined.' not in nextcloud_first_setup.stderr) # noqa 204
  changed_when: nextcloud_first_setup.rc == 0
  when: nextcloud_action == 'initial'
  ignore_errors: "{{ ansible_check_mode }}"

- name: copy config.php from old installation
  copy:
    remote_src: yes
    src: '{{ nextcloud_install_dir }}.old/config/config.php'
    dest: '{{ nextcloud_install_dir }}/config/config.php'
    owner: nextcloud
    group: nextcloud
    mode: "0660"
  when: nextcloud_action == 'upgrade'
  ignore_errors: "{{ ansible_check_mode }}"

- name: give write permissions on .htaccess to the nextcloud user
  file:
    path: "{{ nextcloud_install_dir }}/.htaccess"
    owner: nextcloud
    group: www-data
    mode: "0640"
  ignore_errors: "{{ ansible_check_mode }}"

- name: run nextcloud upgrade command
  become: yes
  become_user: nextcloud
  command: /usr/bin/php ./occ upgrade
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_upgrade
  changed_when: not 'Nextcloud is already at the latest version' in nextcloud_upgrade.stdout
  when: (nextcloud_action == 'initial') or (nextcloud_action == 'upgrade')
  ignore_errors: "{{ ansible_check_mode }}"

# occ doesn't report changed status, not idempotent, always returns changed
# Note: if this fails the install will be left in a broken state, the working copy is still at /var/www/{{ nextcloud_fqdn }}.old/config/config.php
# Some possible additional settings are documented here. See https://github.com/nextcloud/server/blob/master/config/config.sample.php for all available configuration settings
- name: set nextcloud config.php values (always returns changed)
  become: yes
  become_user: nextcloud
  command:
    cmd: /usr/bin/php ./occ config:system:set --type={{ item.type | default('string') }} {{ item.key }} --value={{ item.value }} # noqa no-changed-when
  args:
    chdir: "{{ nextcloud_install_dir }}/"
  with_items:
    - { key: "trusted_domains 1", value: "{{ nextcloud_fqdn }}" }
    - { key: "overwrite.cli.url", value: "{{ nextcloud_full_url }}" }
    - { key: "datadir", value: "{{ nextcloud_data_dir }}" }
    - { key: "dbtype", value: "{{ nextcloud_db_type }}" }
    - { key: "dbname", value: "{{ nextcloud_db_name }}" }
    - { key: "dbhost", value: "{{ nextcloud_db_host }}" }
    - { key: "dbuser", value: "{{ nextcloud_db_user }}" }
    - { key: "dbpassword", value: "{{ nextcloud_db_password }}", no_log: True }
    - { key: "logtimezone", value: "UTC" }
    - { key: "log_type", value: "file" }
    - { key: "log_authfailip", value: "true", type: "boolean" }
    - { key: "loglevel", value: "{{ nextcloud_loglevel }}", type: "integer" }
    - { key: "trashbin_retention_obligation", value: "auto" }
    - { key: "memcache.local", value: '\\OC\\Memcache\\APCu' }
    - { key: "share_folder", value: '{{ nextcloud_share_folder }}' }
    - { key: "defaultapp", value: "{{ nextcloud_defaultapp }}" }
    - { key: "upgrade.disable-web", value: "true", type: "boolean" }
    - { key: "simpleSignUpLink.shown", value: "false", type: "boolean" }
    - { key: "htaccess.rewritebase", value: "/" }
    - { key: "filesystem_check_changes", value: "{{ '1' if nextcloud_filesystem_check_changes else '0' }}", type: "integer" }
    - { key: "mail_domain", value: "{{ (nextcloud_smtp_from | split('@'))[1] if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '' }}" }
    - { key: "mail_from_address", value: "{{ (nextcloud_smtp_from | split('@'))[0] if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '' }}" }
    - { key: "mail_smtpmode", value: "{{ 'smtp' if nextcloud_smtp_mode in ['smtp', 'smtp+ssl', 'disabled'] else 'sendmail' }}" }
    - { key: "mail_smtphost", value: "{{ nextcloud_smtp_host if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '127.0.0.1' }}" }
    - { key: "mail_smtpport", type: "int", value: "{{ nextcloud_smtp_port if nextcloud_smtp_host if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '25' }}" }
    - { key: "mail_smtpsecure", value: "{{ 'ssl' if nextcloud_smtp_mode == 'smtp+ssl' else '' }}" }
    - { key: "mail_smtpauth", type: "boolean", value: "true" }
    - { key: "mail_smtpname", value: "{{ nextcloud_smtp_user if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '' }}", no_log: True }
    - { key: "mail_smtppassword", value: "{{ nextcloud_smtp_password if nextcloud_smtp_mode in ['smtp', 'smtp+ssl'] else '' }}", no_log: True }
    - { key: "mail_sendmailmode", value: "pipe" }
    # - { key: "appstoreenabled", value: "true", type: "boolean" }
    # - { key: "enable_previews", value: "true", type: "boolean" }
    # - { key: "preview_max_x", value: "4096", type: "integer" }
    # - { key: "preview_max_y", value: "4096", type: "integer" }
    # - { key: "preview_max_filesize_image", value: "50", type: "integer" }
    # - { key: "preview_max_memory", value: "128", type: "integer" }
    # - { key: "preview_libreoffice_path", value: '/usr/bin/libreoffice' }
    # - { key: "skeletondirectory", value: '/path/to/nextcloud/core/skeleton' }
    # - { key: "lost_password_link", value: 'https://example.org/link/to/password/reset' }
    # - { key: "updater.server.url", value: 'https://updates.nextcloud.com/updater_server/' }
    # - { key: "updater.release.channel", value: 'stable' }
    # - { key: "updatechecker", value: "true", type: "boolean" }
    # - { key: "has_internet_connection", value: "true", type: "boolean" }
    # - { key: "config_is_read_only", value: "false", type: "boolean" }
    # - { key: "maintenance", value: "false", type: "boolean" }
    # - { key: "auth.bruteforce.protection.enabled", value: "true", type: "boolean" }
    # - { key: "token_auth_enforced", value: "false", type: "boolean" }
    # - { key: "session_lifetime", value: "86400", type: "integer" }
    # - { key: "auto_logout", value: "false", type: "boolean" }
    # - { key: "session_keepalive", value: "true", type: "boolean" }
    # - { key: "hide_login_form", value: "false", type: "boolean" }
    # - { key: "logo_url", value: "https://www.example.org" }
    # - { key: "filelocking.enabled", value: "true", type: "boolean" }
    # - { key: "filelocking.ttl", value: "3600", type: "integer" }
  no_log: "{{ item.no_log | default(False) }}"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: nextcloud-config

- name: update .htaccess for clean URL support (always returns changed)
  become: yes
  become_user: nextcloud
  command: "/usr/bin/php ./occ maintenance:update:htaccess" # noqa no-changed-when
  args:
    chdir: "{{ nextcloud_install_dir }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: schedule nextcloud background tasks
  cron:
    user: nextcloud
    cron_file: nextcloud
    minute: "*/5"
    job: "/usr/bin/php -f {{ nextcloud_install_dir }}/cron.php >/dev/null"
    name: "run nextcloud background tasks"

- name: add missing primary keys and indices to nextcloud database
  become: yes
  become_user: nextcloud
  command: "/usr/bin/php ./occ --no-interaction db:{{ item }}"
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_add_missing_pkeys_indices
  changed_when: "'Adding' in nextcloud_add_missing_pkeys_indices.stdout"
  ignore_errors: "{{ ansible_check_mode }}"
  with_items:
    - add-missing-primary-keys
    - add-missing-indices

- name: convert columns to bigint in nextcloud database
  become: yes
  become_user: nextcloud
  command: "/usr/bin/php ./occ --no-interaction db:convert-filecache-bigint"
  args:
    chdir: "{{ nextcloud_install_dir }}"
  register: nextcloud_convert_filecache_bigint
  changed_when: "'will be updated' in nextcloud_convert_filecache_bigint.stdout"
  ignore_errors: "{{ ansible_check_mode }}"

### ANSIBLE FACTS ###

- name: create ansible facts.d directory
  file:
    path: /etc/ansible/facts.d
    state: directory
    mode: "0755"

- name: create nextcloud fact file
  template:
    src: etc_ansible_facts.d_nextcloud.fact.j2
    dest: /etc/ansible/facts.d/nextcloud.fact
    mode: "0644"

### NEXTCLOUD APPLICATIONS ####

- name: include nextcloud applications configuration tasks
  import_tasks: nextcloud-applications.yml
  tags: nextcloud-applications

### CLEANUP ###

- name: remove nextcloud zip extraction directory
  file:
    path: /root/nextcloud-unpack
    state: absent

- name: remove old nextcloud installation
  file:
    path: '{{ nextcloud_install_dir }}.old'
    state: absent
  no_log: True
  when:
    - nextcloud_action == 'upgrade'
