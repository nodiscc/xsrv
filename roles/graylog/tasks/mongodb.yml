### MONGODB ###

- name: add mongodb APT signing keys
  copy:
    src: usr_share_keyrings_mongodb.gpg
    dest: /usr/share/keyrings/mongodb.gpg
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

- name: add mongodb APT repository
  template:
    src: etc_apt_sources.list.d_mongodb.list.j2
    dest: /etc/apt/sources.list.d/mongodb.list
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

# update APT cache for mongodb packages to become available
- name: apply configuration (flush handlers)
  meta: flush_handlers

- name: install mongodb packages
  apt:
    package:
      - mongodb-org
      - mongodb-org-database
      - mongodb-org-database-tools-extra
      - mongodb-org-mongos
      - mongodb-org-server
      - mongodb-org-shell
      - mongodb-org-tools
      - python3-pymongo # required to use ansible mongodb modules
      - python3-venv # required to install pymongo in a virtualenv
    state: present
  ignore_errors: "{{ ansible_check_mode }}"

# the SHA sums of the mongodb-database-tools include files which are not actually present in the package
# debsums detects these as missing files and sends a warning to the user. Add these files to debsums ignore list
- name: prevent incorrect debsums reports about missing files in mongodb-database-tools
  lineinfile:
    path: /etc/debsums-ignore
    line: "{{ item }}"
    state: present
    owner: root
    group: root
    mode: "0600"
    create: yes
  with_items:
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/bsondump
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongodump
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongoexport
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongofiles
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongoimport
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongorestore
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongostat
    - /mongodb-database-tools-.*-x86_64-100..../usr/bin/mongotop
    - /mongodb-database-tools-.*-x86_64-100..../usr/share/doc/mongodb-database-tools/LICENSE.md
    - /mongodb-database-tools-.*-x86_64-100..../usr/share/doc/mongodb-database-tools/README.md
    - /mongodb-database-tools-.*-x86_64-100..../usr/share/doc/mongodb-database-tools/THIRD-PARTY-NOTICES

### SERVICE ###

- name: enable/disable start/stop mongodb service
  systemd:
    name: mongod
    enabled: "{{ graylog_enable_service }}"
    state: "{{ 'started' if graylog_enable_service else 'stopped' }}"
    daemon_reload: yes
  ignore_errors: "{{ ansible_check_mode }}"

##### AUTHENTICATION #####

# python3-pymongo from Debian packages is v3.x, but v4.x is required to use ansible mongodb modules
# so we install it in a virtualenv
- name: install pymongo 4 in virtualenv
  become: yes
  become_user: mongodb
  pip:
    name: pymongo>4.0,<5.0
    virtualenv: /var/lib/mongodb/.venv
    virtualenv_command: "python3 -m venv"
  ignore_errors: "{{ ansible_check_mode }}"

# run as the mongodb user so that python3 modules installed from pip as mongodb are not run by root
- name: create mongodb admin user
  become: yes
  become_user: mongodb
  mongodb_user:
    login_user: "{{ 'admin' if ansible_local.graylog.mongodb_auth_configured is defined else omit }}"
    login_password: "{{ mongodb_admin_password if ansible_local.graylog.mongodb_auth_configured is defined else omit }}"
    login_port: "27017"
    database: "admin"
    name: "admin"
    password: "{{ mongodb_admin_password }}"
    update_password: on_create
    roles:
      - { db: "admin", role: "userAdminAnyDatabase" }
      - { db: "admin", role: "readWriteAnyDatabase" }
      - { db: "admin", role: "backup" }
  ignore_errors: "{{ ansible_check_mode }}"
  when: graylog_enable_service | bool
  vars:
    ansible_python_interpreter: /var/lib/mongodb/.venv/bin/python3

- name: create graylog mongodb user and database
  become: yes
  become_user: mongodb
  mongodb_user:
    login_user: "{{ 'admin' if ansible_local.graylog.mongodb_auth_configured is defined else omit }}"
    login_password: "{{ mongodb_admin_password if ansible_local.graylog.mongodb_auth_configured is defined else omit }}"
    database: "graylog"
    name: "graylog"
    password: "{{ graylog_mongodb_password }}"
    update_password: on_create
    roles:
      - { db: "graylog", role: "readWrite" }
      - { db: "graylog", role: "dbAdmin" }
  ignore_errors: "{{ ansible_check_mode }}"
  when: graylog_enable_service | bool
  vars:
    ansible_python_interpreter: /var/lib/mongodb/.venv/bin/python3

- name: configure mongodb (enable authentication)
  template:
    src: etc_mongod.conf.j2
    dest: /etc/mongod.conf
    owner: root
    group: root
    mode: "0644"
  notify: restart mongodb

- name: apply configuration (flush handlers)
  meta: flush_handlers
