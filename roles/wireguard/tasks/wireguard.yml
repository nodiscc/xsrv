### INSTALLATION ###

- name: install wireguard tools
  apt:
    state: present
    package:
      - wireguard-tools
      - qrencode

- name: enable wireguard kernel module
  modprobe:
    name: wireguard
    state: present

- name: create wireguard configuration directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0700"
  with_items:
    - /etc/wireguard
    - /etc/wireguard/private
    - /etc/wireguard/peers
    - /etc/wireguard/peers/public
    - /etc/wireguard/peers/private
    - /etc/wireguard/peers/config
    - /etc/wireguard/peers/client-config

### SERVER KEY/CONFIG GENERATION ###

- name: generate wireguard server keys
  shell: "set -o pipefail && wg genkey | (umask 0077 && tee /etc/wireguard/private/server.key) | wg pubkey > /etc/wireguard/private/server.pub"
  args:
    creates: /etc/wireguard/private/server.key
    executable: /bin/bash

- name: get wireguard server private key from file
  slurp:
    src: /etc/wireguard/private/server.key
  register: wireguard_server_private_key
  ignore_errors: "{{ ansible_check_mode }}"

- name: get wireguard server public key from file
  slurp:
    src: /etc/wireguard/private/server.pub
  register: wireguard_server_public_key
  ignore_errors: "{{ ansible_check_mode }}"

# - name: display wireguard server private key
#   debug:
#     msg: "{{ wireguard_server_private_key.content | b64decode }}"
#   ignore_errors: "{{ ansible_check_mode }}"

# TODO delete old config files directly under /etc/wireguard/peers/*.pub,conf

- name: copy wireguard server configuration
  template:
    src: etc_wireguard_peers_config_000-wg0.conf.j2
    dest: /etc/wireguard/peers/config/000-wg0.conf
    owner: root
    group: root
    mode: "0600"
  ignore_errors: "{{ ansible_check_mode }}"

##### PEER KEY/CONFIG GENERATION #####

- name: generate wireguard peers private keys
  shell: "wg genkey > /etc/wireguard/peers/private/{{ item.name }}.key"
  args:
    creates: "/etc/wireguard/peers/private/{{ item.name }}.key"
  loop: "{{ wireguard_peers }}"
  when:
    - (item.state is not defined) or (item.state == 'present')
    - item.public_key is not defined

- name: generate wireguard peers public keys
  shell: "set -o pipefail && cat /etc/wireguard/peers/private/{{ item.name }}.key | wg pubkey > /etc/wireguard/peers/public/{{ item.name }}.pub"
  args:
    creates: "/etc/wireguard/peers/public/{{ item.name }}.pub"
    executable: /bin/bash
  loop: "{{ wireguard_peers }}"
  when:
    - (item.state is not defined) or (item.state == 'present')
    - item.public_key is not defined

- name: copy wireguard peer config generation script
  copy:
    src: usr_local_bin_wireguard-gen-peer-config
    dest: /usr/local/bin/wireguard-gen-peer-config
    owner: root
    group: root
    mode: "0755"

# positional arguments: PEER_NAME PUBLIC_KEY PEER_IP_ADDRESS SERVER_PUBLIC_ADDRESS SERVER_PRIVATE_ADDRESS ROUTES
- name: generate wireguard peers configs
  command: >
    /usr/local/bin/wireguard-gen-peer-config
    {{ item.name }}
    {{ item.public_key | default('auto') }}
    {{ item.ip_address }}
    {{ wireguard_server_public_ip }}
    {{ wireguard_server_ip | ansible.utils.ipaddr('address') }}
    {{ (item.routes | default('0.0.0.0/0')) | join(',') }}
  when: (item.state is not defined) or (item.state == 'present')
  loop: "{{ wireguard_peers }}"
  register: wg_gen_config
  changed_when: "'configuration has changed' in wg_gen_config.stdout"

##### PEER KEY/CONFIG DELETION #####

- name: delete wireguard peers private keys
  file:
    state: absent
    path: "/etc/wireguard/peers/private/{{ item.name }}.key"
  loop: "{{ wireguard_peers }}"
  when: (item.state is defined) and (item.state == 'absent')

- name: delete wireguard peers public keys
  file:
    state: absent
    path: "/etc/wireguard/peers/public/{{ item.name }}.pub"
  loop: "{{ wireguard_peers }}"
  when: (item.state is defined) and (item.state == 'absent')

- name: delete wireguard peers configs
  file:
    state: absent
    path: "/etc/wireguard/peers/config/{{ item.name }}.conf"
  loop: "{{ wireguard_peers }}"
  when: (item.state is defined) and (item.state == 'absent')

- name: delete wireguard peers client configs
  file:
    state: absent
    path: "/etc/wireguard/peers/client-config/{{ item.name }}.conf"
  loop: "{{ wireguard_peers }}"
  when: (item.state is defined) and (item.state == 'absent')

- name: show information about sending configuration files to clients
  debug:
    msg: "Please provide VPN clients with their client configuration files which were generated in /etc/wireguard/peers/client-config/ on the server"

- name: apply configuration (flush handler)
  meta: flush_handlers

### ASSSEMBLE CONFIGURATION ###

# assemble all files from /etc/wireguard/peers/config/*.conf to /etc/wireguard/wg0.conf
- name: assemble wireguard configuration
  become: yes
  assemble:
    src: /etc/wireguard/peers/config/
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: "0640"
    delimiter: ''
  notify: reload wireguard configuration
  ignore_errors: "{{ ansible_check_mode }}"


### SERVICE ###

- name: enable/disable start/stop wireguard service
  systemd:
    name: wg-quick@wg0
    enabled: "{{ wireguard_enable_service }}"
    state: "{{ 'started' if wireguard_enable_service else 'stopped' }}"
  ignore_errors: "{{ ansible_check_mode }}"
  register: wireguard_systemd_service
