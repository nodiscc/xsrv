##### USER #####

- name: create owncast user
  become: yes
  user:
    name: owncast
    state: present
    home: /var/lib/owncast
    create_home: no

- name: create owncast directories
  become: yes
  file:
    path: "{{ item.path }}"
    state: directory
    owner: owncast
    group: owncast
    mode: "{{ item.mode }}"
  with_items:
    - path: /var/lib/owncast
      mode: "0775"
    - path: /var/lib/owncast/data
      mode: "0770"
  ignore_errors: "{{ ansible_check_mode }}"

- name: check if systemd/logind session lingering is enabled
  stat:
    path: "/var/lib/systemd/linger/owncast"
  register: linger_file

- name: enable systemd/logind session lingering
  become: yes
  command:
    cmd: loginctl enable-linger owncast
  when: not linger_file.stat.exists
  changed_when: yes

##### PODMAN ####

- name: pull owncast image
  become: yes
  become_user: owncast
  containers.podman.podman_image:
    name: "{{ owncast_image }}"
    force: yes
  ignore_errors: "{{ ansible_check_mode }}"
  notify: restart owncast service

- name: run owncast container
  become: yes
  become_user: owncast
  containers.podman.podman_container:
    name: owncast
    image: "{{ owncast_image }}"
    command: "--adminpassword {{ owncast_admin_password }}"
    publish:
      - "10081:8080"
      - "1935:1935"
    volumes:
      - "/var/lib/owncast/data:/app/data"
  ignore_errors: "{{ ansible_check_mode }}"

- name: generate systemd unit file for owncast container
  become: yes
  become_user: owncast
  containers.podman.podman_generate_systemd:
    name: owncast
    use_names: yes
    dest: ~/.config/systemd/user
    no_header: yes
  notify:
    - reload systemd unit files (owncast)
    - restart owncast service
  ignore_errors: "{{ ansible_check_mode }}"

- name: apply configuration (flush handlers)
  meta: flush_handlers

# use sudo systemctl --user --machine owncast@ list-units to list another user's services
- name: enable owncast service
  become: yes
  become_user: owncast
  systemd:
    name: container-owncast.service
    scope: user
    state: "{{ 'started' if owncast_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if owncast_enable_service else 'no' }}"
  ignore_errors: "{{ ansible_check_mode }}"
