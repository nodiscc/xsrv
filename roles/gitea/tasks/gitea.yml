- name: install required packages
  apt:
    package:
      - git
      - gnupg
    state: present

- name: download gitea binary
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "0640"
  with_items:
    - url: "https://github.com/go-gitea/gitea/releases/download/v{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
      dest: "/root/gitea-{{ gitea_version }}-linux-amd64"
    - url: "https://github.com/go-gitea/gitea/releases/download/v{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64.asc"
      dest: "/root/gitea-{{ gitea_version }}-linux-amd64.asc"
    - url: "https://github.com/go-gitea/gitea/releases/download/v{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64.sha256"
      dest: "/root/gitea-{{ gitea_version }}-linux-amd64.sha256"

# Key from 'gpg --keyserver pgp.mit.edu --recv 7C9E68152594688862D62AF62D9AE806EC1592E2; gpg --export --armor 7C9E68152594688862D62AF62D9AE806EC1592E2'
- name: copy gitea GPG key
  copy:
    src: root_gitea.key
    dest: /root/gitea.key
    owner: root
    group: root
    mode: "0660"

- name: import gitea GPG key
  command: gpg --import /root/gitea.key
  register: gitea_import_gpgkey
  changed_when: "'unchanged: 1' not in gitea_import_gpgkey.stderr"

- name: verify gitea GPG signatures
  command: gpg --verify /root/gitea-{{ gitea_version }}-linux-amd64.asc /root/gitea-{{ gitea_version }}-linux-amd64
  changed_when: no

- name: create gitea group
  group:
    name: gitea
    state: present
    system: yes

- name: create gitea user
  user:
    name: gitea
    system: yes
    shell: /bin/bash
    comment: "Gitea git service"
    password: "*"
    home: "{{ gitea_user_home }}"
    append: yes
    groups: gitea
  ignore_errors: "{{ ansible_check_mode }}"

- name: add gitea user to ssh-access group
  user:
    name: gitea
    append: yes
    groups: ssh-access
  when:
    - ansible_local.ssh.ansible_managed is defined
    - ansible_local.ssh.ansible_managed | bool

- name: create gitea directories
  file:
    state: directory
    path: "{{ item.path }}"
    owner: "{{ item.owner | default('gitea') }}"
    group: gitea
    mode: "{{ item.mode | default('u=rwX,g=rwX') }}"
    recurse: no
  with_items:
    - path: "/etc/gitea"
      owner: root
      mode: "u=rwX,g=rX"
    - path: "{{ gitea_user_home }}"
    - path: "{{ gitea_user_home }}/custom"
    - path: "{{ gitea_user_home }}/public"
    - path: "{{ gitea_user_home }}/data"
    - path: "{{ gitea_user_home }}/indexers"
    - path: "{{ gitea_user_home }}/log"
    - path: '{{ gitea_user_home }}/repos'

- name: install gitea systemd service/unit file
  template:
    src: "etc_systemd_system_gitea.service.j2"
    dest: "/etc/systemd/system/gitea.service"
    mode: "0644"
  notify:
    - reload systemd unit files
    - restart gitea

# re-read systemd service configuration
- name: apply configuration (flush handlers)
  meta: flush_handlers

- name: install gitea binary
  copy:
    src: "/root/gitea-{{ gitea_version }}-linux-amd64"
    dest: "/usr/local/bin/gitea"
    mode: "0755"
    remote_src: yes
    owner: root
    group: root
  notify: restart gitea
  ignore_errors: "{{ ansible_check_mode }}"

- name: set gitea_root_url variable
  set_fact:
    gitea_root_url: "https://{{ gitea_fqdn }}{{ gitea_base_url }}"
  check_mode: no
  tags: gitea-config

- name: copy gitea configuration file
  template:
    src: 'etc_gitea_app.ini'
    dest: '/etc/gitea/app.ini'
    owner: root
    group: gitea
    mode: "0640" # read only for gitea
  notify: restart gitea
  tags: gitea-config

- name: create gitea database tables
  become: yes
  become_user: gitea
  command: "gitea migrate --config /etc/gitea/app.ini --work-path {{ gitea_user_home }}"
  when:
    - (ansible_local.gitea.general.db_initialized is not defined) or (not ansible_local.gitea.general.db_initialized)
  changed_when: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: create gitea admin user
  become: yes
  become_user: gitea
  command: gitea admin user create
           --work-path "{{ gitea_user_home }}"
           --username "{{ gitea_admin_username }}"
           --password "{{ gitea_admin_password }}"
           --email "{{ gitea_admin_email }}"
           --admin --config /etc/gitea/app.ini
  register: "gitea_create_user"
  failed_when: gitea_create_user.rc != 0 and 'user already exists' not in gitea_create_user.stderr
  changed_when: "'user already exists' not in gitea_create_user.stderr"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: gitea-create-admin

# restart gitea immediately if configuration was changed
- name: apply configuration (flush handlers)
  meta: flush_handlers
  tags: gitea


##### SERVICE #####

- name: start/stop/enable/disable gitea service
  service:
    name: gitea
    state: "{{ 'started' if gitea_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if gitea_enable_service else 'no' }}"
  tags: services
  ignore_errors: "{{ ansible_check_mode }}"
