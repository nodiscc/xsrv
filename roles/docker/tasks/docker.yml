- name: ensure old versions of Docker are not installed
  apt:
    package:
      - docker
      - docker-engine
    state: absent

- name: ensure dependencies are installed
  apt:
    state: present
    package:
      - apt-transport-https
      - ca-certificates
      - gpg # required for APT key import
      - pass # required for docker registry login

- name: migration/1.10.0 - remove old Docker key from APT keyring
  apt_key:
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: absent
  ignore_errors: "{{ ansible_check_mode }}"

- name: add docker APT signing keys
  copy:
    src: usr_share_keyrings_docker.gpg
    dest: /usr/share/keyrings/docker.gpg
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

- name: add docker APT repository
  template:
    src: etc_apt_sources.list.d_docker.list.j2
    dest: /etc/apt/sources.list.d/docker.list
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

# update APT cache for docker packages to become available
- name: apply configuration (flush handlers)
  meta: flush_handlers

- name: create docker configuration directory
  file:
    path: "/etc/docker"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: copy docker daemon configuration
  template:
    src: etc_docker_daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
  notify: restart docker

- name: install Docker
  package:
    name: "docker-ce"
    state: "present"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"

- name: install docker_stack module requirements and docker-compose
  package:
    name:
      - python3-jsondiff
      - python3-docker
      - python3-yaml
      - docker-compose
    state: present

- name: ensure docker users are added to the docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items: "{{ docker_users }}"

- name: enable/disable nightly cleanup of unused docker data
  cron:
    user: root
    cron_file: docker-system-prune-all
    name: "cleanup unused docker data"
    minute: "30"
    hour: "23"
    day: "*"
    job: docker system prune --all --force | logger -t docker-system-prune-all
    disabled: "{{ False if docker_prune_nightly else True }}"

- name: force all notified handlers to run now
  meta: flush_handlers

##### SWARM #####

- name: configure docker swarm
  docker_swarm: "{{ docker_swarm }}" # noqa args[module] # false positive
  ignore_errors: "{{ ansible_check_mode }}"

##### SERVICE #####

- name: start/stop/enable/disable docker service
  service:
    name: docker
    state: "{{ 'started' if docker_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if docker_enable_service else 'no' }}"
  tags: services
  ignore_errors: "{{ ansible_check_mode }}"
