##### COMMON/GENERAL SYSTEM SETTINGS #####
##### HOSTNAME #####
# yes/no: update hostname using ansible inventory name
setup_hostname: yes

##### DNS RESOLVER #####
# update DNS nameserver settings (resolv.conf) (yes/no)
setup_dns: no
# list of DNS nameservers IP addresses
# Example:
# dns_nameservers:
#   - "1.1.1.1"
#   - "1.0.0.1"
dns_nameservers: []

##### HOSTS FILE #####
# update hosts file (yes/no)
setup_hosts_file: yes
# list of hosts to add/remove from the hosts file
# Example:
# hosts_file_entries:
#   - ip_address: "10.0.0.1"
#     hostname: "srv01.example.org"
#     state: present # optional, absent/present, default present
#   - ip_address: "10.0.0.2"
#     hostname: "srv02.example.org mail.example.org"
#   - ip_address: "1.2.3.4"
#     state: absent
hosts_file_entries: []

##### SYSCTL (NETWORKING/MEMORY) #####
# update sysctl settings (yes/no)
setup_sysctl: yes
# Enable/disable packet forwarding between network interfaces (routing) (yes/no)
sysctl_allow_forwarding: no
# answer ICMP pings (yes/no)
sysctl_answer_ping: no
# "swappiness" setting. 100: swap/reclaim RAM aggressively. 0: do not swap unless necessary
sysctl_vm_swappiness: '10'
# "VFS cache pressure" setting. 100+ : prefer caching memory pages over disk cache
sysctl_vm_vfs_cache_pressure: '150'
# yes/no: enable/disable creation of core dumps on kernel crashes
# These are usually not needed and may contain sensitive information
os_security_kernel_enable_core_dump: no

### PACKAGE MANAGEMENT ###
# yes/no: setup APT sources (security, backports) and automatic security upgrades
setup_apt: yes
# yes/no: enable 'contrib' and 'non-free' software sections in debian APT repositories
apt_enable_nonfree: no
# clean downloaded package archives (apt clean) every n-days (0=disable)
apt_clean_days: 7
# automatic upgrades: allow unattended upgrades from the following sources (see 50unattended-upgrades.j2)
# these settings have no effect if corresponding repositories are not enabled/configured
apt_unattended_upgrades_origins_patterns:
  - "origin=Debian,codename=${distro_codename},label=Debian" # Debian stable
  - "origin=Debian,codename=${distro_codename}-updates" # Debian stable point release
  - "origin=Debian,codename=${distro_codename}-proposed-updates" # Debian stable proposed updates
  - "origin=Debian,codename=${distro_codename}-security,label=Debian-Security" # Debian security
  - "origin=Debian Backports,codename=${distro_codename}-backports,label=Debian Backports" # Debian backports
  - "origin=packagecloud.io/netdata/netdata,label=netdata" # nodiscc.xsrv.monitoring_netdata
  - "origin=Jellyfin,site=repo.jellyfin.org" # nodiscc.xsrv.jellyfin
  - "o=Proxmox,site=download.proxmox.com" # nodiscc.xsrv.proxmox
  - "o=Docker,site=download.docker.com" # nodiscc.xsrv.docker
  - "o=Freight,a=stable,site=packages.graylog2.org" # nodiscc.xsrv.graylog
  - "o=mongodb,a=buster,site=repo.mongodb.org" # nodiscc.xsrv.graylog
  - "o=elastic,a=stable,site=artifacts.elastic.co" # nodiscc.xsrv.graylog

### DATE/TIME ###
# yes/no: setup ntp time service
setup_datetime: yes
# timezone name (if commented out, timezone will not be changed)
# timezone: "Etc/UTC"

##### SSH SERVER #####
# setup/harden SSH server (yes/no)
setup_ssh: yes
# List of public SSH key files to authorize on the server for the ansible user
# Example: ['public_keys/john.pub', 'public_keys/jane.pub']
# Removing a key here does not remove it on the server!
ssh_authorized_keys: []
# a list of public keys that are never accepted by the ssh server
ssh_server_revoked_keys: []
# sshd and SFTP server log levels, respecively (QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, DEBUG3)
ssh_log_level: "VERBOSE"
ssh_sftp_loglevel: "INFO"
# types of SSH TCP forwarding to allow (no, local, remote, all - QUOTED)
# remote/all is required to use the host as a jumpbox
ssh_allow_tcp_forwarding: "no"
# enable/disable root SSH logins (yes/no/prohibit-password/forced-commands-only - QUOTED)
ssh_permit_root_login: "no"
# enable/disable SSH password authentication (yes, no - QUOTED)
ssh_password_authentication: "no"

### FIREWALL ###
# setup firewall (yes/no)
setup_firewall: yes
# log rejected/dropped packets (all/unicast/broadcast/multicast/off)
firewalld_log_denied: all
# Firewalld zones
# Example:
# firewalld_zone_sources:
#   - zone: internal # add 192.168.0.0/16 and 10.0.0.0/8 to the internal zone
#     sources: # list of IP addresses or networks (CIDR)
#       - 192.168.0.0/16
#       - 10.0.0.0/8
#     state: enabled # optional, enabled/disabled, default enabled
#     permanent: yes # optional, yes/no, default yes
#     immediate: yes # optional, yes/no, default yes
#   - zone: internal # remove 172.16.0.0/12 from the internal zone
#     sources:
#       - 172.16.0.0/12
#     state: disabled
#   - zone: drop # drop all traffic coming from these addresses
#     sources:
#       - 10.11.12.13/24
#       - 15.8.4.6
#   - zone: ldap-clients # custom zone, incoming traffic from specific hosts
#     sources:
#       - 192.168.1.2
#       - 192.168.1.3
#   - zone: delete-this-zone
#     delete: yes # set delete: yes to completely delete the zone
firewalld_zone_sources:
  - zone: internal # add all RFC1918 addresses to the internal zone
    sources:
      - 192.168.0.0/24
      - 172.16.0.0/12
      - 10.0.0.0/8
# Services to allow in firewalld zones
# Example:
# firewalld_zone_services:
#   - zone: public # firewall zone to configure
#     services: # list of services to add/remove from the zone
#       - ssh
#     state: disabled # optional, enabled/disabled, default enabled, set to disabled to remove a rule
#     permanent: yes # optional, yes/no, default yes
#     immediate: yes # optional, yes/no, default yes
#   - zone: internal
#     services:
#       - dns # allow DNS from the internal zone
#   - zone: ldap-clients # allow traffic for a specific service from a zone
#     services:
#       - ldap
#       - ldaps
firewalld_zone_services:
  - zone: public
    services:
      - ssh # allow SSH from anywhere
  - zone: public
    services:
      - dhcpv6-client # remove dhcpv6-client rule from the default public zone
    state: disabled
# additional firewalld configuration - https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html
firewalld: []

### FAIL2BAN ###
# setup fail2ban bruteforce detection/prevention system (yes/no)
setup_fail2ban: yes
# list of IPs to never ban - 127.0.0.1 is always whitelisted
fail2ban_ignoreip:
  - '10.0.0.0/8'
  - '192.168.0.0/16'
  - '172.16.0.0/12'
# fail2ban default ban duration (in seconds or time abbreviation format)
fail2ban_default_bantime: "1year"
# fail2ban: default interval (in seconds or time abbreviation format) before counting failures towards a ban
fail2ban_default_findtime: "10min"
# fail2ban default number of failures that have to occur in the last findtime to ban the IP
fail2ban_default_maxretry: 5

### USERS ###
# Additional user accounts to create.
# Supports these parameters from the user (https://docs.ansible.com/ansible/latest/modules/user_module.html) module:
#   name, password, comment, create_home, home, groups, append, generate_ssh_key, update_password
# In addition these optional parameters are supported:
#   ssh_authorized_keys: list of public key files to authorize on this account
#   sudo_nopasswd_commands: list of commands the user should be able to run with sudo without password
# Example:
# linux_users:
#   - name: "remotebackup"
#     groups: [ "ssh", "sudo" ]
#     comment: "limited user account for remote backups"
#     ssh_authorized_keys: ['public_keys/root@backup.EXAMPLE.org.pub']
#     home: "/home/remotebackup"
#     sudo_nopasswd_commands: ['/usr/bin/rsync']
#   - name: "my-sftp-account"
#     home: "/var/lib/sftp/my-sftp-account"
#     comment: "SFTP-only account"
#     ssh_authorized_keys: [ "public_keys/gitlab-runner@my.EXAMPLE.org.pub", "public_keys/client1@EXAMPLE.org.pub" ]
#     groups: [ 'ssh', 'sftponly' ]
#   - name: "{{ ansible_user }}"
#     groups: adm
#     append: yes
#     comment: "ansible user/allowed to read system logs"
#   - name: bob
#     groups: ['ssh', 'sudo']
#     password: "{{ bob_ssh_password }}"
#     comment: "SSH account for bob, root access via sudo"
linux_users: []
# allow ansible connecting user to run 'sudo rsync' without password (yes/no)
# Required to use the ansible synchronize module, and download files generated by the backup role
ansible_user_allow_sudo_rsync_nopasswd: yes

### CRON TASK SCHEDULER ###
# (yes/no): setup cron permission restrictions/logging options
setup_cron: yes
# list of users allowed to use crontab for task scheduling
linux_users_crontab_allow: ['root']
# cron jobs log level (cumulative, https://manpages.debian.org/bullseye/cron/cron.8.en.html#OPTIONS)
cron_log_level: 7

### OUTGOING MAIL ###
# (yes/no) install outgoing system mail (msmtp)
setup_msmtp: no
# following msmtp_* variables are required is setup_msmtp: yes
# mail relay (SMTP server) address/port/username/password
msmtp_host: "smtp.CHANGEME.org"
msmtp_port: 587
msmtp_username: "CHANGEME"
msmtp_password: "CHANGEME"
# mail address to redirect all local mail to
msmtp_admin_email: "CHANGEME"
# (auto/admin@CHANGEME.org) sender address for outgoing mail
msmtp_from: 'auto'
# enable SMTP authentication (LOGIN) (yes/no)
msmtp_auth_enabled: yes
# yes/no: enable STARTTLS connection to the SMTP server
msmtp_tls_enabled: yes
# yes/no: enforce checking for valid server TLS certificates
msmtp_tls_certcheck: yes
# yes/no: use STARTTLS
msmtp_starttls: yes
# (optional) TLS certificate fingerprint of the SMTP server. use this to accept a self-signed certificate. get the server's certificate fingerprint with openssl s_client -connect $smtp_host:587 -starttls smtp < /dev/null 2>/dev/null |openssl x509 -fingerprint -noout
# msmtp_host_fingerprint: '11:22:33:44:55:66:77:88:99:00:13:37:AA:BB:CC:DD:EE:FF:AD:C2'
# the user to forward all local root mail to, if msmtp setup is disabled
mail_root_alias: "{{ ansible_user }}"


### PACKAGES ###
# install a basic set of interactive command-line diagnostic/file manipulation/shell utilities (yes/no) - see tasks/50utilities.yml for the full list
setup_cli_utils: yes
# install haveged entropy generator (yes/no) - good to have on virtual machines where system is frequently running out of entropy
setup_haveged: yes
