##### USER #####

- name: create moodist user
  become: yes
  user:
    name: moodist
    state: present
    home: /var/lib/moodist
    create_home: yes

- name: check if systemd/logind session lingering is enabled
  stat:
    path: "/var/lib/systemd/linger/moodist"
  register: linger_file

- name: enable systemd/logind session lingering
  become: yes
  command:
    cmd: loginctl enable-linger moodist
  changed_when: yes
  when: not linger_file.stat.exists

##### PODMAN ####

- name: pull moodist image
  become: yes
  become_user: moodist
  containers.podman.podman_image:
    name: "{{ moodist_image }}"
    force: yes
  ignore_errors: "{{ ansible_check_mode }}"
  notify: restart moodist service

# to access the instance from another host, the firewall must allow incoming connections on port 8000/tcp (sudo firewall-cmd --add-port=8000/tcp --zone=internal)
- name: run moodist container
  become: yes
  become_user: moodist
  containers.podman.podman_container:
    name: moodist
    image: "{{ moodist_image }}"
    publish:
      - "8089:8080"
  ignore_errors: "{{ ansible_check_mode }}"
  when: moodist_enable_service | bool

##### SERVICE #####

- name: generate systemd unit file for moodist container
  become: yes
  become_user: moodist
  containers.podman.podman_generate_systemd:
    name: moodist
    use_names: yes
    dest: ~/.config/systemd/user
    no_header: yes
  notify:
    - reload systemd unit files (moodist)
    - restart moodist service
  ignore_errors: "{{ ansible_check_mode }}"
  when: moodist_enable_service | bool

- name: apply configuration (flush handlers)
  meta: flush_handlers

# use sudo systemctl --user --machine moodist@ list-units to list another user's services
- name: enable moodist service
  become: yes
  become_user: moodist
  systemd:
    name: container-moodist.service
    scope: user
    state: "{{ 'started' if moodist_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if moodist_enable_service else 'no' }}"
  ignore_errors: "{{ ansible_check_mode }}"
