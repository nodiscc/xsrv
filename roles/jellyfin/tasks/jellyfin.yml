##### JELLYFIN INSTALLATION #####

- name: install jellyfin requirements
  apt:
    state: present
    package:
      - apt-transport-https
      - python3-lxml

- name: add jellyfin APT signing keys
  copy:
    src: usr_share_keyrings_jellyfin.gpg
    dest: /usr/share/keyrings/jellyfin.gpg
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

- name: add jellyfin APT repository
  template:
    src: etc_apt_sources.list.d_jellyfin.list.j2
    dest: /etc/apt/sources.list.d/jellyfin.list
    owner: root
    group: root
    mode: "0644"
  notify: update apt cache

# update APT cache for jellyfin packages to become available
- name: apply configuration (flush handlers)
  meta: flush_handlers

- name: install jellyfin
  apt:
    state: present
    package:
      - jellyfin
      - jellyfin-ffmpeg7
  notify: display jellyfin first run message
  ignore_errors: "{{ ansible_check_mode }}"

- name: configure jellyfin systemd service
  template:
    src: etc_systemd_system_jellyfin.service.d_jellyfin.service.conf.j2
    dest: /etc/systemd/system/jellyfin.service.d/jellyfin.service.conf
    owner: root
    group: root
    mode: "0644"
  notify:
    - reload systemd unit files
    - restart jellyfin
  ignore_errors: "{{ ansible_check_mode }}"

# apply jellyfin systemd service hardening configuration
- name: apply configuration (flush handlers)
  meta: flush_handlers

# Disabled as it has no effect https://github.com/jellyfin/jellyfin/issues/8533
# jellyfin_allowed_hosts is enforced by apache instead
# - name: build dictionary for jellyfin remote IP filter
#   set_fact:
#     jellyfin_allowed_hosts_dict: "{{ jellyfin_allowed_hosts | map('community.general.dict_kv', 'string') }}"
# - name: configure jellyfin remote IP filter
#   xml:
#     path: /etc/jellyfin/network.xml
#     xpath: /NetworkConfiguration/RemoteIPFilter
#     set_children: "{{ jellyfin_allowed_hosts_dict }}"
#     pretty_print: yes
#   notify: restart jellyfin
#   ignore_errors: "{{ ansible_check_mode }}"

# Disabled as network.xml might not exist on first run
# - name: enable/disable jellyfin DLNA auto-discovery
#   xml:
#     path: /etc/jellyfin/network.xml
#     xpath: /NetworkConfiguration/AutoDiscovery
#     value: "{{ 'true' if jellyfin_enable_dlna_discovery else 'false' }}"
#     pretty_print: yes
#   notify: restart jellyfin
#   ignore_errors: "{{ ansible_check_mode }}"

##### MEDIA DIRECTORIES #####

- name: create default media directories
  file:
    path: "/var/lib/jellyfin/{{ item }}"
    state: directory
    owner: jellyfin
    group: jellyfin
    mode: "2770"
  with_items:
    - media
    - media/movies
    - media/music
    - media/shows
    - media/books
    - media/photos
    - media/musicvideos
    - media/mixedcontent

- name: create symlink from home directory to jellyfin media directory
  file:
    state: link
    dest: "{{ ansible_env.HOME }}/MEDIA"
    src: "/var/lib/jellyfin/media/"
  ignore_errors: "{{ ansible_check_mode }}"

# required to allow jellyfin group to write in subdirectories
- name: set permissions on jellyfin data directory
  file:
    path: /var/lib/jellyfin
    owner: jellyfin
    group: jellyfin
    mode: "0770"
  ignore_errors: "{{ ansible_check_mode }}"

- name: add users to the jellyfin group
  user:
    name: "{{ item }}"
    groups: jellyfin
    append: true
  with_items: "{{ jellyfin_users }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: allow jellyfin to read/write transmission downloads directory
  user:
    name: jellyfin
    groups: debian-transmission
    append: yes
  when:
    - ansible_local.transmission.ansible_managed is defined
    - ansible_local.transmission.ansible_managed | bool
  ignore_errors: "{{ ansible_check_mode }}"

##### SERVICE #####

- name: start/stop/enable/disable jellyfin service
  service:
    name: jellyfin
    state: "{{ 'started' if jellyfin_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if jellyfin_enable_service else 'no' }}"
  tags: services
  ignore_errors: "{{ ansible_check_mode }}"
