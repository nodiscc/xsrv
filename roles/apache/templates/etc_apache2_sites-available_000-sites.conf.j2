##### DEFAULT VIRTUALHOST FOR ACCESS FROM LOCALHOST #####
# Will be server for requests originating from localhost, and that do not match any configured ServerName,
# for example a local monitoring service polling the /server-status endpoint
<VirtualHost 127.0.0.1:80>
    ServerName localhost
    DocumentRoot /var/www/html
</VirtualHost>

##### DEFAULT VIRTUALHOST #####
# Will be served for requests NOT originating from localhost, and that do not match any configured ServerName,
# for example trying to access the server directly by IP address. It displays and logs a 403 error using the default: prefix in access.log.
<VirtualHost *:80>
    ServerName default
    DocumentRoot /var/www/html/
    RewriteEngine On
    RewriteRule ^.*$ - [R=403,L]
</VirtualHost>
<VirtualHost _default_:443>
    ServerName default
    DocumentRoot /var/www/html
    SSLEngine On
    SSLCertificateFile /etc/ssl/certs/localhost.crt
    SSLCertificateKeyFile /etc/ssl/private/localhost.key
    RewriteEngine On
    RewriteRule ^.*$ - [R=403,L]
</VirtualHost>

##### REVERSE PROXIES #####
# Configured through apache_reverseproxies
{% for item in apache_reverseproxies %}
<VirtualHost *:80>
    ServerName {{ item.servername }}
    # Redirect all HTTP requests to HTTPS
{% if (item.https_mode is not defined or item.https_mode == 'selfsigned') and (item.redirect_https is not defined or item.redirect_https) %}
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
{% endif %}
</VirtualHost>
{% if item.https_mode is defined and item.https_mode == 'letsencrypt' %}
MDomain {{ item.servername }}
{% if item.redirect_https is not defined or item.redirect_https %}
MDRequireHttps permanent
{% endif %}
{% endif %}
<VirtualHost *:443>
  ServerName  {{ item.servername }}
  SSLEngine on
{% if item.https_mode is not defined or item.https_mode == 'selfsigned' %}
  SSLCertificateFile /etc/ssl/certs/{{ item.servername }}.crt
  SSLCertificateKeyFile /etc/ssl/private/{{ item.servername }}.key
{% endif %}
  # Inform the upstream server that the original request was done over HTTPS
  RequestHeader set X-Forwarded-Proto https
  RequestHeader set X-Forwarded-Ssl on
  SSLProxyEngine on
  SSLProxyCheckPeerCN off
  SSLProxyCheckPeerName off
  ProxyPreserveHost On
  ProxyRequests off
  ProxyPass / {{ item.upstream }}/
  ProxyPassReverse / {{ item.upstream }}/
{% if item.extra_directives is defined %}
{% for directive in item.extra_directives %}
  {{ directive }}
{% endfor %}
{% endif %}
</VirtualHost>

{% endfor %}
