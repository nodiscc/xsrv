# gitlab CI configuration - xsrv
# https://docs.gitlab.com/ee/ci/
# These variables must be set in the environment (Settings > CI/CD > variables)
# ANSIBLE_VAULT_PASSWORD (contents of .ansible-vault-password, type variable, masked)
# GITLAB_CI_SSH_KEY (contents of private SSH key authorized on remote hosts, terminated by newline, type file)

image: debian:buster-backports

stages:
  - staging
  - production

variables:
  ANSIBLE_CONFIG: ansible.cfg
  ANSIBLE_HOST_KEY_CHECKING: "False"
  ANSIBLE_FORCE_COLOR: "True"
  XSRV_PLAYBOOKS_DIR: "$CI_PROJECT_DIR/../"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip-cache"
  TAGS:
    value: "all"
    description: "run tasks tagged with these tags, comma-separated (default all)"

cache:
  paths:
    - "$CI_PROJECT_DIR/pip-cache"
    - "$CI_PROJECT_DIR/.venv"

include: # only run pipelines for branches/tags, not merge requests
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

before_script:
  - export ANSIBLE_PRIVATE_KEY_FILE="$GITLAB_CI_SSH_KEY"
  - chmod 0600 "$ANSIBLE_PRIVATE_KEY_FILE"
  - echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password
  - ln -s $CI_PROJECT_DIR $CI_PROJECT_DIR/../default
  - echo 'Apt::Install-Recommends "false";' >> /etc/apt/apt.conf.d/99-norecommends
  - apt update && apt -y install git bash python3-pip python3-venv
  - wget -O /usr/local/bin/xsrv https://gitlab.com/nodiscc/xsrv/-/raw/release/xsrv
  - chmod a+x /usr/local/bin/xsrv

##### STAGING #####

check-staging: # run check mode on staging environment
  stage: staging
  script:
    - TAGS=$TAGS xsrv check staging
  interruptible: true # stop this job when a new pipeline starts on the same branch
  needs: [] # don't wait for other jobs to complete before starting this job

deploy-staging: # run deployment on staging environment
  stage: staging
  script:
    - TAGS=$TAGS xsrv deploy staging
  resource_group: staging # wait for other jobs on this environment to finish before starting this job
  needs:
    - check-staging

##### PRODUCTION #####

check-production:
  stage: check
  script:
    - TAGS=$TAGS xsrv check production
  interruptible: true
  needs: []

deploy-production:
  stage: production
  script:
    - TAGS=$TAGS xsrv deploy production
  when: manual # require manual action/click to start deployment
  resource_group: production
  needs:
    - check-production
    - deploy-staging
  only: # only allow deployment of the master branch or tags to production
    - master
    - tags
